
C:\Users\pclark\AppData\Local\Temp\arduino_build_722434/Qwiic_Iridium_9603N_ATtiny841.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	25 c0       	rjmp	.+74     	; 0x4c <__dtors_end>
   2:	ec c3       	rjmp	.+2008   	; 0x7dc <__vector_1>
   4:	48 c0       	rjmp	.+144    	; 0x96 <__bad_interrupt>
   6:	47 c0       	rjmp	.+142    	; 0x96 <__bad_interrupt>
   8:	46 c0       	rjmp	.+140    	; 0x96 <__bad_interrupt>
   a:	45 c0       	rjmp	.+138    	; 0x96 <__bad_interrupt>
   c:	44 c0       	rjmp	.+136    	; 0x96 <__bad_interrupt>
   e:	43 c0       	rjmp	.+134    	; 0x96 <__bad_interrupt>
  10:	42 c0       	rjmp	.+132    	; 0x96 <__bad_interrupt>
  12:	41 c0       	rjmp	.+130    	; 0x96 <__bad_interrupt>
  14:	40 c0       	rjmp	.+128    	; 0x96 <__bad_interrupt>
  16:	98 c3       	rjmp	.+1840   	; 0x748 <__vector_11>
  18:	3e c0       	rjmp	.+124    	; 0x96 <__bad_interrupt>
  1a:	3d c0       	rjmp	.+122    	; 0x96 <__bad_interrupt>
  1c:	3c c0       	rjmp	.+120    	; 0x96 <__bad_interrupt>
  1e:	3b c0       	rjmp	.+118    	; 0x96 <__bad_interrupt>
  20:	3a c0       	rjmp	.+116    	; 0x96 <__bad_interrupt>
  22:	39 c0       	rjmp	.+114    	; 0x96 <__bad_interrupt>
  24:	38 c0       	rjmp	.+112    	; 0x96 <__bad_interrupt>
  26:	37 c0       	rjmp	.+110    	; 0x96 <__bad_interrupt>
  28:	36 c0       	rjmp	.+108    	; 0x96 <__bad_interrupt>
  2a:	35 c0       	rjmp	.+106    	; 0x96 <__bad_interrupt>
  2c:	39 c4       	rjmp	.+2162   	; 0x8a0 <__vector_22>
  2e:	33 c0       	rjmp	.+102    	; 0x96 <__bad_interrupt>
  30:	32 c0       	rjmp	.+100    	; 0x96 <__bad_interrupt>
  32:	31 c0       	rjmp	.+98     	; 0x96 <__bad_interrupt>
  34:	00 c4       	rjmp	.+2048   	; 0x836 <__vector_26>
  36:	2f c0       	rjmp	.+94     	; 0x96 <__bad_interrupt>
  38:	2e c0       	rjmp	.+92     	; 0x96 <__bad_interrupt>
  3a:	67 c4       	rjmp	.+2254   	; 0x90a <__vector_29>

0000003c <__trampolines_end>:
__trampolines_start():
  3c:	01 02       	muls	r16, r17
  3e:	04 08       	sbc	r0, r4
  40:	10 20       	and	r1, r0
  42:	40 80       	ld	r4, Z
  44:	04 02       	muls	r16, r20
  46:	01 08       	sbc	r0, r1

00000048 <__ctors_start>:
__ctors_start():
  48:	96 05       	cpc	r25, r6

0000004a <__ctors_end>:
__dtors_start():
  4a:	e7 06       	cpc	r14, r23

0000004c <__dtors_end>:
__dtors_end():
  4c:	11 24       	eor	r1, r1
  4e:	1f be       	out	0x3f, r1	; 63
  50:	cf ef       	ldi	r28, 0xFF	; 255
  52:	d2 e0       	ldi	r29, 0x02	; 2
  54:	de bf       	out	0x3e, r29	; 62
  56:	cd bf       	out	0x3d, r28	; 61

00000058 <__do_copy_data>:
__do_copy_data():
  58:	11 e0       	ldi	r17, 0x01	; 1
  5a:	a0 e0       	ldi	r26, 0x00	; 0
  5c:	b1 e0       	ldi	r27, 0x01	; 1
  5e:	ec ef       	ldi	r30, 0xFC	; 252
  60:	fd e0       	ldi	r31, 0x0D	; 13
  62:	02 c0       	rjmp	.+4      	; 0x68 <__do_copy_data+0x10>
  64:	05 90       	lpm	r0, Z+
  66:	0d 92       	st	X+, r0
  68:	a0 32       	cpi	r26, 0x20	; 32
  6a:	b1 07       	cpc	r27, r17
  6c:	d9 f7       	brne	.-10     	; 0x64 <__do_copy_data+0xc>

0000006e <__do_clear_bss>:
__do_clear_bss():
  6e:	21 e0       	ldi	r18, 0x01	; 1
  70:	a0 e2       	ldi	r26, 0x20	; 32
  72:	b1 e0       	ldi	r27, 0x01	; 1
  74:	01 c0       	rjmp	.+2      	; 0x78 <.do_clear_bss_start>

00000076 <.do_clear_bss_loop>:
  76:	1d 92       	st	X+, r1

00000078 <.do_clear_bss_start>:
  78:	a8 3f       	cpi	r26, 0xF8	; 248
  7a:	b2 07       	cpc	r27, r18
  7c:	e1 f7       	brne	.-8      	; 0x76 <.do_clear_bss_loop>

0000007e <__do_global_ctors>:
__do_global_ctors():
  7e:	10 e0       	ldi	r17, 0x00	; 0
  80:	c5 e2       	ldi	r28, 0x25	; 37
  82:	d0 e0       	ldi	r29, 0x00	; 0
  84:	03 c0       	rjmp	.+6      	; 0x8c <__do_global_ctors+0xe>
  86:	21 97       	sbiw	r28, 0x01	; 1
  88:	fe 01       	movw	r30, r28
  8a:	a2 d6       	rcall	.+3396   	; 0xdd0 <__tablejump2__>
  8c:	c4 32       	cpi	r28, 0x24	; 36
  8e:	d1 07       	cpc	r29, r17
  90:	d1 f7       	brne	.-12     	; 0x86 <__do_global_ctors+0x8>
  92:	c4 d5       	rcall	.+2952   	; 0xc1c <main>
  94:	a7 c6       	rjmp	.+3406   	; 0xde4 <__do_global_dtors>

00000096 <__bad_interrupt>:
__vector_28():
  96:	b4 cf       	rjmp	.-152    	; 0x0 <__vectors>

00000098 <digitalRead>:
digitalRead():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:247
}
#endif

int digitalRead(uint8_t pin)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  98:	87 ff       	sbrs	r24, 7
  9a:	08 c0       	rjmp	.+16     	; 0xac <digitalRead+0x14>
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	89 30       	cpi	r24, 0x09	; 9
  a0:	28 f0       	brcs	.+10     	; 0xac <digitalRead+0x14>
  a2:	8b 30       	cpi	r24, 0x0B	; 11
  a4:	11 f0       	breq	.+4      	; 0xaa <digitalRead+0x12>
  a6:	81 50       	subi	r24, 0x01	; 1
  a8:	01 c0       	rjmp	.+2      	; 0xac <digitalRead+0x14>
  aa:	89 e0       	ldi	r24, 0x09	; 9
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:248
  uint8_t bit = digitalPinToBitMask(pin);
  ac:	e8 2f       	mov	r30, r24
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	e4 5c       	subi	r30, 0xC4	; 196
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	e4 91       	lpm	r30, Z
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:249
  uint8_t port = digitalPinToPort(pin);
  b6:	88 30       	cpi	r24, 0x08	; 8
  b8:	38 f4       	brcc	.+14     	; 0xc8 <digitalRead+0x30>
  ba:	91 e0       	ldi	r25, 0x01	; 1
turnOffPWM():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:123
// each digitalread or write.
//
__attribute__((always_inline)) static inline void turnOffPWM( uint8_t pin )
{
  #if CORE_PWM_COUNT >= 1
    if ( pin == CORE_PWM0_PIN )
  bc:	84 30       	cpi	r24, 0x04	; 4
  be:	29 f4       	brne	.+10     	; 0xca <digitalRead+0x32>
Timer0_SetCompareOutputModeA():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:155
}
timer0_com_t;

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeA( timer0_com_t com )
{
  TCCR0A = (TCCR0A & ~MASK2(COM0A1,COM0A0)) | (com << COM0A0);
  c0:	80 b7       	in	r24, 0x30	; 48
  c2:	8f 73       	andi	r24, 0x3F	; 63
  c4:	80 bf       	out	0x30, r24	; 48
  c6:	24 c0       	rjmp	.+72     	; 0x110 <digitalRead+0x78>
digitalRead():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:249

int digitalRead(uint8_t pin)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);
  c8:	92 e0       	ldi	r25, 0x02	; 2
turnOffPWM():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:131
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 2
    if ( pin == CORE_PWM1_PIN )
  ca:	85 30       	cpi	r24, 0x05	; 5
  cc:	21 f4       	brne	.+8      	; 0xd6 <digitalRead+0x3e>
Timer0_SetCompareOutputModeB():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:161
}

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeB( timer0_com_t com )
{

  TCCR0A = (TCCR0A & ~MASK2(COM0B1,COM0B0)) | (com << COM0B0);
  ce:	80 b7       	in	r24, 0x30	; 48
  d0:	8f 7c       	andi	r24, 0xCF	; 207
  d2:	80 bf       	out	0x30, r24	; 48
  d4:	18 c0       	rjmp	.+48     	; 0x106 <digitalRead+0x6e>
turnOffPWM():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:139
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 3
    if ( pin == CORE_PWM2_PIN )
  d6:	86 30       	cpi	r24, 0x06	; 6
  d8:	19 f4       	brne	.+6      	; 0xe0 <digitalRead+0x48>
Timer1_SetCompareOutputModeA():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:323
}
timer1_com_t;

__attribute__((always_inline)) static inline void Timer1_SetCompareOutputModeA( timer1_com_t com )
{
  TCCR1A = (TCCR1A & ~MASK2(COM1A1,COM1A0)) | (com << COM1A0);
  da:	8f b5       	in	r24, 0x2f	; 47
  dc:	8f 73       	andi	r24, 0x3F	; 63
  de:	04 c0       	rjmp	.+8      	; 0xe8 <digitalRead+0x50>
turnOffPWM():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:147
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 4
    if ( pin == CORE_PWM3_PIN )
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	21 f4       	brne	.+8      	; 0xec <digitalRead+0x54>
Timer1_SetCompareOutputModeB():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:328
}

__attribute__((always_inline)) static inline void Timer1_SetCompareOutputModeB( timer1_com_t com )
{
  TCCR1A = (TCCR1A & ~MASK2(COM1B1,COM1B0)) | (com << COM1B0);
  e4:	8f b5       	in	r24, 0x2f	; 47
  e6:	8f 7c       	andi	r24, 0xCF	; 207
  e8:	8f bd       	out	0x2f, r24	; 47
  ea:	0d c0       	rjmp	.+26     	; 0x106 <digitalRead+0x6e>
turnOffPWM():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:155
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 5
    if ( pin == CORE_PWM4_PIN )
  ec:	88 30       	cpi	r24, 0x08	; 8
  ee:	21 f4       	brne	.+8      	; 0xf8 <digitalRead+0x60>
Timer2_SetCompareOutputModeA():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:511
}
timer2_com_t;

__attribute__((always_inline)) static inline void Timer2_SetCompareOutputModeA( timer2_com_t com )
{
  TCCR2A = (TCCR2A & ~MASK2(COM2A1,COM2A0)) | (com << COM2A0);
  f0:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
  f4:	8f 73       	andi	r24, 0x3F	; 63
  f6:	05 c0       	rjmp	.+10     	; 0x102 <digitalRead+0x6a>
turnOffPWM():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:164
    else
  #endif

  #if CORE_PWM_COUNT >= 6

    if ( pin == CORE_PWM5_PIN )
  f8:	87 30       	cpi	r24, 0x07	; 7
  fa:	29 f4       	brne	.+10     	; 0x106 <digitalRead+0x6e>
Timer2_SetCompareOutputModeB():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:516
}

__attribute__((always_inline)) static inline void Timer2_SetCompareOutputModeB( timer2_com_t com )
{
  TCCR2A = (TCCR2A & ~MASK2(COM2B1,COM2B0)) | (com << COM2B0);
  fc:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
 100:	8f 7c       	andi	r24, 0xCF	; 207
 102:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
digitalRead():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:257

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  turnOffPWM( pin );

  if (*portInputRegister(port) & bit) return HIGH;
 106:	91 30       	cpi	r25, 0x01	; 1
 108:	19 f0       	breq	.+6      	; 0x110 <digitalRead+0x78>
 10a:	a6 e3       	ldi	r26, 0x36	; 54
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <digitalRead+0x7c>
 110:	a9 e3       	ldi	r26, 0x39	; 57
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	8c 91       	ld	r24, X
 116:	e8 23       	and	r30, r24
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	19 f4       	brne	.+6      	; 0x124 <digitalRead+0x8c>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	08 95       	ret
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:259
  return LOW;
}
 124:	08 95       	ret

00000126 <digitalWrite>:
digitalWrite():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:181
}

#if defined(__AVR_ATtinyX41__ ) || defined(__AVR_ATtiny1634__) || defined(__AVR_ATtiny828__)

void digitalWrite(uint8_t pin, uint8_t val)
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:183
  #ifndef __AVR_ATtiny828__
  if (pin&64) {pin=analogInputToDigitalPin((pin&63));}
 12a:	86 ff       	sbrs	r24, 6
 12c:	08 c0       	rjmp	.+16     	; 0x13e <digitalWrite+0x18>
 12e:	8f 73       	andi	r24, 0x3F	; 63
 130:	89 30       	cpi	r24, 0x09	; 9
 132:	28 f0       	brcs	.+10     	; 0x13e <digitalWrite+0x18>
 134:	8b 30       	cpi	r24, 0x0B	; 11
 136:	11 f0       	breq	.+4      	; 0x13c <digitalWrite+0x16>
 138:	81 50       	subi	r24, 0x01	; 1
 13a:	01 c0       	rjmp	.+2      	; 0x13e <digitalWrite+0x18>
 13c:	89 e0       	ldi	r24, 0x09	; 9
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:185
  #endif
  uint8_t bit = digitalPinToBitMask(pin);
 13e:	e8 2f       	mov	r30, r24
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	e4 5c       	subi	r30, 0xC4	; 196
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	e4 91       	lpm	r30, Z
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:186
  uint8_t port = digitalPinToPort(pin);
 148:	88 30       	cpi	r24, 0x08	; 8
 14a:	38 f4       	brcc	.+14     	; 0x15a <digitalWrite+0x34>
 14c:	91 e0       	ldi	r25, 0x01	; 1
turnOffPWM():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:123
// each digitalread or write.
//
__attribute__((always_inline)) static inline void turnOffPWM( uint8_t pin )
{
  #if CORE_PWM_COUNT >= 1
    if ( pin == CORE_PWM0_PIN )
 14e:	84 30       	cpi	r24, 0x04	; 4
 150:	29 f4       	brne	.+10     	; 0x15c <digitalWrite+0x36>
Timer0_SetCompareOutputModeA():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:155
}
timer0_com_t;

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeA( timer0_com_t com )
{
  TCCR0A = (TCCR0A & ~MASK2(COM0A1,COM0A0)) | (com << COM0A0);
 152:	80 b7       	in	r24, 0x30	; 48
 154:	8f 73       	andi	r24, 0x3F	; 63
 156:	80 bf       	out	0x30, r24	; 48
 158:	21 c0       	rjmp	.+66     	; 0x19c <digitalWrite+0x76>
digitalWrite():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:186
{
  #ifndef __AVR_ATtiny828__
  if (pin&64) {pin=analogInputToDigitalPin((pin&63));}
  #endif
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);
 15a:	92 e0       	ldi	r25, 0x02	; 2
turnOffPWM():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:131
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 2
    if ( pin == CORE_PWM1_PIN )
 15c:	85 30       	cpi	r24, 0x05	; 5
 15e:	21 f4       	brne	.+8      	; 0x168 <digitalWrite+0x42>
Timer0_SetCompareOutputModeB():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:161
}

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeB( timer0_com_t com )
{

  TCCR0A = (TCCR0A & ~MASK2(COM0B1,COM0B0)) | (com << COM0B0);
 160:	80 b7       	in	r24, 0x30	; 48
 162:	8f 7c       	andi	r24, 0xCF	; 207
 164:	80 bf       	out	0x30, r24	; 48
 166:	18 c0       	rjmp	.+48     	; 0x198 <digitalWrite+0x72>
turnOffPWM():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:139
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 3
    if ( pin == CORE_PWM2_PIN )
 168:	86 30       	cpi	r24, 0x06	; 6
 16a:	19 f4       	brne	.+6      	; 0x172 <digitalWrite+0x4c>
Timer1_SetCompareOutputModeA():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:323
}
timer1_com_t;

__attribute__((always_inline)) static inline void Timer1_SetCompareOutputModeA( timer1_com_t com )
{
  TCCR1A = (TCCR1A & ~MASK2(COM1A1,COM1A0)) | (com << COM1A0);
 16c:	8f b5       	in	r24, 0x2f	; 47
 16e:	8f 73       	andi	r24, 0x3F	; 63
 170:	04 c0       	rjmp	.+8      	; 0x17a <digitalWrite+0x54>
turnOffPWM():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:147
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 4
    if ( pin == CORE_PWM3_PIN )
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	21 f4       	brne	.+8      	; 0x17e <digitalWrite+0x58>
Timer1_SetCompareOutputModeB():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:328
}

__attribute__((always_inline)) static inline void Timer1_SetCompareOutputModeB( timer1_com_t com )
{
  TCCR1A = (TCCR1A & ~MASK2(COM1B1,COM1B0)) | (com << COM1B0);
 176:	8f b5       	in	r24, 0x2f	; 47
 178:	8f 7c       	andi	r24, 0xCF	; 207
 17a:	8f bd       	out	0x2f, r24	; 47
 17c:	0d c0       	rjmp	.+26     	; 0x198 <digitalWrite+0x72>
turnOffPWM():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:155
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 5
    if ( pin == CORE_PWM4_PIN )
 17e:	88 30       	cpi	r24, 0x08	; 8
 180:	21 f4       	brne	.+8      	; 0x18a <digitalWrite+0x64>
Timer2_SetCompareOutputModeA():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:511
}
timer2_com_t;

__attribute__((always_inline)) static inline void Timer2_SetCompareOutputModeA( timer2_com_t com )
{
  TCCR2A = (TCCR2A & ~MASK2(COM2A1,COM2A0)) | (com << COM2A0);
 182:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
 186:	8f 73       	andi	r24, 0x3F	; 63
 188:	05 c0       	rjmp	.+10     	; 0x194 <digitalWrite+0x6e>
turnOffPWM():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:164
    else
  #endif

  #if CORE_PWM_COUNT >= 6

    if ( pin == CORE_PWM5_PIN )
 18a:	87 30       	cpi	r24, 0x07	; 7
 18c:	29 f4       	brne	.+10     	; 0x198 <digitalWrite+0x72>
Timer2_SetCompareOutputModeB():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:516
}

__attribute__((always_inline)) static inline void Timer2_SetCompareOutputModeB( timer2_com_t com )
{
  TCCR2A = (TCCR2A & ~MASK2(COM2B1,COM2B0)) | (com << COM2B0);
 18e:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
 192:	8f 7c       	andi	r24, 0xCF	; 207
 194:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
digitalWrite():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:195

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  turnOffPWM( pin );

  out = portOutputRegister(port);
 198:	91 30       	cpi	r25, 0x01	; 1
 19a:	29 f4       	brne	.+10     	; 0x1a6 <digitalWrite+0x80>
 19c:	cb e3       	ldi	r28, 0x3B	; 59
 19e:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:196
  pue = portPullupRegister(port);
 1a0:	a3 e6       	ldi	r26, 0x63	; 99
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <digitalWrite+0x88>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:195

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  turnOffPWM( pin );

  out = portOutputRegister(port);
 1a6:	c8 e3       	ldi	r28, 0x38	; 56
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:196
  pue = portPullupRegister(port);
 1aa:	a2 e6       	ldi	r26, 0x62	; 98
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	8e 2f       	mov	r24, r30
 1b0:	80 95       	com	r24
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:198

  if (val == LOW) {
 1b2:	61 11       	cpse	r22, r1
 1b4:	0a c0       	rjmp	.+20     	; 0x1ca <digitalWrite+0xa4>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:199
    uint8_t oldSREG = SREG;
 1b6:	2f b7       	in	r18, 0x3f	; 63
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:200
    cli();
 1b8:	f8 94       	cli
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:201
    *out &= ~bit;
 1ba:	98 81       	ld	r25, Y
 1bc:	98 23       	and	r25, r24
 1be:	98 83       	st	Y, r25
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:202
    *pue &= ~bit; //Turn off the pullups
 1c0:	9c 91       	ld	r25, X
 1c2:	89 23       	and	r24, r25
 1c4:	8c 93       	st	X, r24
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:203
    SREG = oldSREG;
 1c6:	2f bf       	out	0x3f, r18	; 63
 1c8:	09 c0       	rjmp	.+18     	; 0x1dc <digitalWrite+0xb6>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:205
  } else {
    uint8_t oldSREG = SREG;
 1ca:	9f b7       	in	r25, 0x3f	; 63
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:206
    cli();
 1cc:	f8 94       	cli
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:207
    *out |= bit;
 1ce:	28 81       	ld	r18, Y
 1d0:	e2 2b       	or	r30, r18
 1d2:	e8 83       	st	Y, r30
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:208
    *pue &= ~bit;
 1d4:	2c 91       	ld	r18, X
 1d6:	82 23       	and	r24, r18
 1d8:	8c 93       	st	X, r24
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:209
    SREG = oldSREG;
 1da:	9f bf       	out	0x3f, r25	; 63
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:211
  }
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <pinMode>:
pinMode():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:37
#include "core_timers.h"
#include "PwmTimer.h"

#if defined(__AVR_ATtinyX41__ ) || defined(__AVR_ATtiny1634__) || defined(__AVR_ATtiny828__)
void pinMode(uint8_t pin, uint8_t mode)
{
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:39
  #ifndef __AVR_ATtiny828__
  if (pin&64) {pin=analogInputToDigitalPin((pin & 63));}
 1e6:	86 ff       	sbrs	r24, 6
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <pinMode+0x18>
 1ea:	8f 73       	andi	r24, 0x3F	; 63
 1ec:	89 30       	cpi	r24, 0x09	; 9
 1ee:	28 f0       	brcs	.+10     	; 0x1fa <pinMode+0x18>
 1f0:	8b 30       	cpi	r24, 0x0B	; 11
 1f2:	11 f0       	breq	.+4      	; 0x1f8 <pinMode+0x16>
 1f4:	81 50       	subi	r24, 0x01	; 1
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <pinMode+0x18>
 1f8:	89 e0       	ldi	r24, 0x09	; 9
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:41
  #endif
  uint8_t bit = digitalPinToBitMask(pin);
 1fa:	e8 2f       	mov	r30, r24
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	e4 5c       	subi	r30, 0xC4	; 196
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	94 91       	lpm	r25, Z
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:42
  uint8_t port = digitalPinToPort(pin);
 204:	88 30       	cpi	r24, 0x08	; 8
 206:	38 f4       	brcc	.+14     	; 0x216 <pinMode+0x34>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:49

  if (port == NOT_A_PIN) return;

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
  out = portOutputRegister(port);
 208:	eb e3       	ldi	r30, 0x3B	; 59
 20a:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:48
  volatile uint8_t *reg, *out, *pue;

  if (port == NOT_A_PIN) return;

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
 20c:	aa e3       	ldi	r26, 0x3A	; 58
 20e:	b0 e0       	ldi	r27, 0x00	; 0
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:50
  out = portOutputRegister(port);
  pue = portPullupRegister(port);
 210:	c3 e6       	ldi	r28, 0x63	; 99
 212:	d0 e0       	ldi	r29, 0x00	; 0
 214:	06 c0       	rjmp	.+12     	; 0x222 <pinMode+0x40>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:49

  if (port == NOT_A_PIN) return;

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
  out = portOutputRegister(port);
 216:	e8 e3       	ldi	r30, 0x38	; 56
 218:	f0 e0       	ldi	r31, 0x00	; 0
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:48
  volatile uint8_t *reg, *out, *pue;

  if (port == NOT_A_PIN) return;

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
 21a:	a7 e3       	ldi	r26, 0x37	; 55
 21c:	b0 e0       	ldi	r27, 0x00	; 0
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:50
  out = portOutputRegister(port);
  pue = portPullupRegister(port);
 21e:	c2 e6       	ldi	r28, 0x62	; 98
 220:	d0 e0       	ldi	r29, 0x00	; 0
 222:	89 2f       	mov	r24, r25
 224:	80 95       	com	r24
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:53

  if (mode == INPUT) {
    uint8_t oldSREG = SREG;
 226:	2f b7       	in	r18, 0x3f	; 63
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:52
  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
  out = portOutputRegister(port);
  pue = portPullupRegister(port);

  if (mode == INPUT) {
 228:	61 11       	cpse	r22, r1
 22a:	0b c0       	rjmp	.+22     	; 0x242 <pinMode+0x60>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:54
    uint8_t oldSREG = SREG;
                cli();
 22c:	f8 94       	cli
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:55
    *reg &= ~bit;
 22e:	9c 91       	ld	r25, X
 230:	98 23       	and	r25, r24
 232:	9c 93       	st	X, r25
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:56
    *out &= ~bit;
 234:	90 81       	ld	r25, Z
 236:	98 23       	and	r25, r24
 238:	90 83       	st	Z, r25
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:57
    *pue &= ~bit;
 23a:	98 81       	ld	r25, Y
 23c:	89 23       	and	r24, r25
 23e:	88 83       	st	Y, r24
 240:	14 c0       	rjmp	.+40     	; 0x26a <pinMode+0x88>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:59
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
 242:	62 30       	cpi	r22, 0x02	; 2
 244:	59 f4       	brne	.+22     	; 0x25c <pinMode+0x7a>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:61
    uint8_t oldSREG = SREG;
                cli();
 246:	f8 94       	cli
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:62
    *reg &= ~bit;
 248:	3c 91       	ld	r19, X
 24a:	83 23       	and	r24, r19
 24c:	8c 93       	st	X, r24
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:63
    *out |= bit;
 24e:	80 81       	ld	r24, Z
 250:	89 2b       	or	r24, r25
 252:	80 83       	st	Z, r24
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:64
    *pue |= bit;
 254:	e8 81       	ld	r30, Y
 256:	e9 2b       	or	r30, r25
 258:	e8 83       	st	Y, r30
 25a:	07 c0       	rjmp	.+14     	; 0x26a <pinMode+0x88>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:68
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
                cli();
 25c:	f8 94       	cli
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:69
    *pue &= ~bit;
 25e:	38 81       	ld	r19, Y
 260:	83 23       	and	r24, r19
 262:	88 83       	st	Y, r24
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:70
    *reg |= bit;
 264:	ec 91       	ld	r30, X
 266:	e9 2b       	or	r30, r25
 268:	ec 93       	st	X, r30
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:71
    SREG = oldSREG;
 26a:	2f bf       	out	0x3f, r18	; 63
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring_digital.c:73
  }
}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <int0ISR()>:
_Z7int0ISRv():
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/Qwiic_Iridium_9603N_ATtiny841.ino:142
#define PGOOD__ON   HIGH // LTC3225 Power Good - goes high when the supercapacitors are charged (will also be high when !SHDN is low!)
#define PGOOD__OFF  LOW

//INT0 Interrupt Service Routine
//Called on the FALLING edge of the RI pin
void int0ISR() { RI_FLAG = true; } // Set RI_FLAG to true
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <RI_FLAG>
 278:	08 95       	ret

0000027a <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 27a:	cf 92       	push	r12
 27c:	df 92       	push	r13
 27e:	ef 92       	push	r14
 280:	ff 92       	push	r15
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	6c 01       	movw	r12, r24
 28c:	eb 01       	movw	r28, r22
 28e:	7b 01       	movw	r14, r22
 290:	e4 0e       	add	r14, r20
 292:	f5 1e       	adc	r15, r21
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/Print.cpp:35
  size_t n = 0;
 294:	00 e0       	ldi	r16, 0x00	; 0
 296:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/Print.cpp:36
  while (size--) {
 298:	ce 15       	cp	r28, r14
 29a:	df 05       	cpc	r29, r15
 29c:	61 f0       	breq	.+24     	; 0x2b6 <Print::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/Print.cpp:37
    n += write(*buffer++);
 29e:	69 91       	ld	r22, Y+
 2a0:	d6 01       	movw	r26, r12
 2a2:	ed 91       	ld	r30, X+
 2a4:	fc 91       	ld	r31, X
 2a6:	01 90       	ld	r0, Z+
 2a8:	f0 81       	ld	r31, Z
 2aa:	e0 2d       	mov	r30, r0
 2ac:	c6 01       	movw	r24, r12
 2ae:	09 95       	icall
 2b0:	08 0f       	add	r16, r24
 2b2:	19 1f       	adc	r17, r25
 2b4:	f1 cf       	rjmp	.-30     	; 0x298 <Print::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/Print.cpp:40
  }
  return n;
}
 2b6:	c8 01       	movw	r24, r16
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	ef 90       	pop	r14
 2c4:	df 90       	pop	r13
 2c6:	cf 90       	pop	r12
 2c8:	08 95       	ret

000002ca <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:272
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
}

size_t HardwareSerial::write(uint8_t c)
{
 2ca:	fc 01       	movw	r30, r24
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:273
  while (!((*_ucsra) & (1 << _udre)))
 2cc:	a2 89       	ldd	r26, Z+18	; 0x12
 2ce:	b3 89       	ldd	r27, Z+19	; 0x13
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	05 8c       	ldd	r0, Z+29	; 0x1d
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <HardwareSerial::write(unsigned char)+0x12>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <HardwareSerial::write(unsigned char)+0xe>
 2e0:	2c 91       	ld	r18, X
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	28 23       	and	r18, r24
 2e6:	39 23       	and	r19, r25
 2e8:	23 2b       	or	r18, r19
 2ea:	d1 f3       	breq	.-12     	; 0x2e0 <HardwareSerial::write(unsigned char)+0x16>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:276
    ;

  *_udr = c;
 2ec:	06 88       	ldd	r0, Z+22	; 0x16
 2ee:	f7 89       	ldd	r31, Z+23	; 0x17
 2f0:	e0 2d       	mov	r30, r0
 2f2:	60 83       	st	Z, r22
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:279

  return( 1 );
}
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	08 95       	ret

000002fa <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:268
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
 2fa:	dc 01       	movw	r26, r24
 2fc:	1c 96       	adiw	r26, 0x0c	; 12
 2fe:	ed 91       	ld	r30, X+
 300:	fc 91       	ld	r31, X
 302:	1d 97       	sbiw	r26, 0x0d	; 13
 304:	82 a1       	ldd	r24, Z+34	; 0x22
 306:	93 a1       	ldd	r25, Z+35	; 0x23
 308:	91 a3       	std	Z+33, r25	; 0x21
 30a:	80 a3       	std	Z+32, r24	; 0x20
 30c:	08 95       	ret

0000030e <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:248
}

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 30e:	dc 01       	movw	r26, r24
 310:	1c 96       	adiw	r26, 0x0c	; 12
 312:	ed 91       	ld	r30, X+
 314:	fc 91       	ld	r31, X
 316:	1d 97       	sbiw	r26, 0x0d	; 13
 318:	22 a1       	ldd	r18, Z+34	; 0x22
 31a:	33 a1       	ldd	r19, Z+35	; 0x23
 31c:	80 a1       	ldd	r24, Z+32	; 0x20
 31e:	91 a1       	ldd	r25, Z+33	; 0x21
 320:	82 17       	cp	r24, r18
 322:	93 07       	cpc	r25, r19
 324:	61 f0       	breq	.+24     	; 0x33e <HardwareSerial::read()+0x30>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:251
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 326:	df 01       	movw	r26, r30
 328:	a2 0f       	add	r26, r18
 32a:	b3 1f       	adc	r27, r19
 32c:	8c 91       	ld	r24, X
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:252
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
 32e:	2f 5f       	subi	r18, 0xFF	; 255
 330:	3f 4f       	sbci	r19, 0xFF	; 255
 332:	2f 71       	andi	r18, 0x1F	; 31
 334:	33 27       	eor	r19, r19
 336:	33 a3       	std	Z+35, r19	; 0x23
 338:	22 a3       	std	Z+34, r18	; 0x22
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:253
    return c;
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	08 95       	ret
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:249

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    return c;
  }
}
 342:	08 95       	ret

00000344 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:238
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 344:	dc 01       	movw	r26, r24
 346:	1c 96       	adiw	r26, 0x0c	; 12
 348:	ed 91       	ld	r30, X+
 34a:	fc 91       	ld	r31, X
 34c:	1d 97       	sbiw	r26, 0x0d	; 13
 34e:	82 a1       	ldd	r24, Z+34	; 0x22
 350:	93 a1       	ldd	r25, Z+35	; 0x23
 352:	20 a1       	ldd	r18, Z+32	; 0x20
 354:	31 a1       	ldd	r19, Z+33	; 0x21
 356:	28 17       	cp	r18, r24
 358:	39 07       	cpc	r19, r25
 35a:	29 f0       	breq	.+10     	; 0x366 <HardwareSerial::peek()+0x22>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:241
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 35c:	e8 0f       	add	r30, r24
 35e:	f9 1f       	adc	r31, r25
 360:	80 81       	ld	r24, Z
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	08 95       	ret
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:239
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
 366:	8f ef       	ldi	r24, 0xFF	; 255
 368:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:243
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
 36a:	08 95       	ret

0000036c <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:233
  cbi(*_ucsrb, _rxcie);
}

int HardwareSerial::available(void)
{
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
 36c:	dc 01       	movw	r26, r24
 36e:	1c 96       	adiw	r26, 0x0c	; 12
 370:	ed 91       	ld	r30, X+
 372:	fc 91       	ld	r31, X
 374:	1d 97       	sbiw	r26, 0x0d	; 13
 376:	80 a1       	ldd	r24, Z+32	; 0x20
 378:	91 a1       	ldd	r25, Z+33	; 0x21
 37a:	22 a1       	ldd	r18, Z+34	; 0x22
 37c:	33 a1       	ldd	r19, Z+35	; 0x23
 37e:	82 1b       	sub	r24, r18
 380:	93 0b       	sbc	r25, r19
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:234
}
 382:	8f 71       	andi	r24, 0x1F	; 31
 384:	99 27       	eor	r25, r25
 386:	08 95       	ret

00000388 <i2c_tinyS::write(unsigned char const*, unsigned int)>:
_ZN9i2c_tinyS5writeEPKhj():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:74
    }
    return 0;
}

size_t i2c_tinyS::write(const uint8_t* data, size_t quantity) {
    if(i2c->txBufferLength < I2C_BUFFER_LENGTH) {
 388:	dc 01       	movw	r26, r24
 38a:	1c 96       	adiw	r26, 0x0c	; 12
 38c:	ed 91       	ld	r30, X+
 38e:	fc 91       	ld	r31, X
 390:	1d 97       	sbiw	r26, 0x0d	; 13
 392:	26 a1       	ldd	r18, Z+38	; 0x26
 394:	37 a1       	ldd	r19, Z+39	; 0x27
 396:	20 32       	cpi	r18, 0x20	; 32
 398:	31 05       	cpc	r19, r1
 39a:	20 f5       	brcc	.+72     	; 0x3e4 <i2c_tinyS::write(unsigned char const*, unsigned int)+0x5c>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:75
        size_t avail = I2C_BUFFER_LENGTH - i2c->txBufferLength;
 39c:	26 a1       	ldd	r18, Z+38	; 0x26
 39e:	37 a1       	ldd	r19, Z+39	; 0x27
 3a0:	a0 e2       	ldi	r26, 0x20	; 32
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	a2 1b       	sub	r26, r18
 3a6:	b3 0b       	sbc	r27, r19
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:76
        uint8_t* dest = i2c->Buffer + i2c->txBufferLength;
 3a8:	26 a1       	ldd	r18, Z+38	; 0x26
 3aa:	37 a1       	ldd	r19, Z+39	; 0x27
 3ac:	e2 0f       	add	r30, r18
 3ae:	f3 1f       	adc	r31, r19
 3b0:	9a 01       	movw	r18, r20
 3b2:	a4 17       	cp	r26, r20
 3b4:	b5 07       	cpc	r27, r21
 3b6:	08 f4       	brcc	.+2      	; 0x3ba <i2c_tinyS::write(unsigned char const*, unsigned int)+0x32>
 3b8:	9d 01       	movw	r18, r26
 3ba:	db 01       	movw	r26, r22
 3bc:	af 01       	movw	r20, r30
 3be:	42 0f       	add	r20, r18
 3c0:	53 1f       	adc	r21, r19
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:78
        if(quantity > avail) quantity = avail;
        for (size_t count=quantity; count; count--) *dest++ = *data++;
 3c2:	e4 17       	cp	r30, r20
 3c4:	f5 07       	cpc	r31, r21
 3c6:	19 f0       	breq	.+6      	; 0x3ce <i2c_tinyS::write(unsigned char const*, unsigned int)+0x46>
 3c8:	6d 91       	ld	r22, X+
 3ca:	61 93       	st	Z+, r22
 3cc:	fa cf       	rjmp	.-12     	; 0x3c2 <i2c_tinyS::write(unsigned char const*, unsigned int)+0x3a>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:79
        i2c->txBufferLength += quantity;
 3ce:	dc 01       	movw	r26, r24
 3d0:	1c 96       	adiw	r26, 0x0c	; 12
 3d2:	ed 91       	ld	r30, X+
 3d4:	fc 91       	ld	r31, X
 3d6:	1d 97       	sbiw	r26, 0x0d	; 13
 3d8:	86 a1       	ldd	r24, Z+38	; 0x26
 3da:	97 a1       	ldd	r25, Z+39	; 0x27
 3dc:	28 0f       	add	r18, r24
 3de:	39 1f       	adc	r19, r25
 3e0:	37 a3       	std	Z+39, r19	; 0x27
 3e2:	26 a3       	std	Z+38, r18	; 0x26
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:81
    }
}
 3e4:	08 95       	ret

000003e6 <i2c_tinyS::write(unsigned char)>:
_ZN9i2c_tinyS5writeEh():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:66
    i2c->startCount = -1;
    TWSCRA = (_BV(TWSHE) | _BV(TWDIE) | _BV(TWASIE) | _BV(TWEN) | _BV(TWSIE));
}

size_t i2c_tinyS::write(uint8_t data) {
    if(i2c->txBufferLength < I2C_BUFFER_LENGTH) {
 3e6:	dc 01       	movw	r26, r24
 3e8:	1c 96       	adiw	r26, 0x0c	; 12
 3ea:	ed 91       	ld	r30, X+
 3ec:	fc 91       	ld	r31, X
 3ee:	1d 97       	sbiw	r26, 0x0d	; 13
 3f0:	86 a1       	ldd	r24, Z+38	; 0x26
 3f2:	97 a1       	ldd	r25, Z+39	; 0x27
 3f4:	80 97       	sbiw	r24, 0x20	; 32
 3f6:	68 f4       	brcc	.+26     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:67
        i2c->Buffer[i2c->txBufferLength++] = data;
 3f8:	86 a1       	ldd	r24, Z+38	; 0x26
 3fa:	97 a1       	ldd	r25, Z+39	; 0x27
 3fc:	9c 01       	movw	r18, r24
 3fe:	2f 5f       	subi	r18, 0xFF	; 255
 400:	3f 4f       	sbci	r19, 0xFF	; 255
 402:	37 a3       	std	Z+39, r19	; 0x27
 404:	26 a3       	std	Z+38, r18	; 0x26
 406:	e8 0f       	add	r30, r24
 408:	f9 1f       	adc	r31, r25
 40a:	60 83       	st	Z, r22
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:68
        return 1;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	08 95       	ret
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:70
    }
    return 0;
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:71
}
 416:	08 95       	ret

00000418 <TwoWire::write(unsigned char const*, unsigned int) [clone .constprop.6]>:
_ZN7TwoWire5writeEPKhj.constprop.6():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/Wire.cpp:894
  return value;
}

#endif

size_t TwoWire::write(const uint8_t *data, size_t quantity) {
 418:	ef 92       	push	r14
 41a:	ff 92       	push	r15
 41c:	0f 93       	push	r16
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	ec 01       	movw	r28, r24
 426:	7c 01       	movw	r14, r24
 428:	e6 0e       	add	r14, r22
 42a:	f7 1e       	adc	r15, r23
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/Wire.cpp:895
  size_t numBytes = 0;
 42c:	00 e0       	ldi	r16, 0x00	; 0
 42e:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/Wire.cpp:896
  for (size_t i = 0; i < quantity; ++i) {
 430:	ce 15       	cp	r28, r14
 432:	df 05       	cpc	r29, r15
 434:	39 f0       	breq	.+14     	; 0x444 <TwoWire::write(unsigned char const*, unsigned int) [clone .constprop.6]+0x2c>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/Wire.cpp:897
    numBytes += write(data[i]);
 436:	69 91       	ld	r22, Y+
write():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/Wire.cpp:851
  return value;
}
#else //WIRE_SLAVE_ONLY
size_t TwoWire::write(uint8_t data) {
  size_t numBytes = 0;
  numBytes = TinyWireS.write(data);
 438:	89 ee       	ldi	r24, 0xE9	; 233
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	d4 df       	rcall	.-88     	; 0x3e6 <i2c_tinyS::write(unsigned char)>
_ZN7TwoWire5writeEPKhj.constprop.6():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/Wire.cpp:897
#endif

size_t TwoWire::write(const uint8_t *data, size_t quantity) {
  size_t numBytes = 0;
  for (size_t i = 0; i < quantity; ++i) {
    numBytes += write(data[i]);
 43e:	08 0f       	add	r16, r24
 440:	19 1f       	adc	r17, r25
 442:	f6 cf       	rjmp	.-20     	; 0x430 <TwoWire::write(unsigned char const*, unsigned int) [clone .constprop.6]+0x18>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/Wire.cpp:900
  }
  return numBytes;
}
 444:	c8 01       	movw	r24, r16
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	ff 90       	pop	r15
 450:	ef 90       	pop	r14
 452:	08 95       	ret

00000454 <i2c_tinyS::flush()>:
_ZN9i2c_tinyS5flushEv():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.h:110
        inline int peek(void) { return peek_(i2c); }
        static uint8_t readByte_(struct i2cStruct* i2c);
        inline uint8_t readByte(void) { return readByte_(i2c); }
        static uint8_t peekByte_(struct i2cStruct* i2c);
        inline uint8_t peekByte(void) { return peekByte_(i2c); }
        inline void flush(void) {}
 454:	08 95       	ret

00000456 <i2c_tinyS::peek()>:
_ZN9i2c_tinyS4peekEv():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.h:105
        inline size_t write(const char* str) { write((const uint8_t*)str, strlen(str)); }
        inline int available(void) { return i2c->rxBufferLength - i2c->rxBufferIndex; }
        static int read_(struct i2cStruct* i2c);
        inline int read(void) { return read_(i2c); }
        static int peek_(struct i2cStruct* i2c);
        inline int peek(void) { return peek_(i2c); }
 456:	dc 01       	movw	r26, r24
 458:	1c 96       	adiw	r26, 0x0c	; 12
 45a:	ed 91       	ld	r30, X+
 45c:	fc 91       	ld	r31, X
 45e:	1d 97       	sbiw	r26, 0x0d	; 13
peek_():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:89
    if(i2c->rxBufferIndex >= i2c->rxBufferLength) return -1;
    return i2c->Buffer[i2c->rxBufferIndex++];
}

int i2c_tinyS::peek_(struct i2cStruct* i2c) {
    if(i2c->rxBufferIndex >= i2c->rxBufferLength) return -1;
 460:	20 a1       	ldd	r18, Z+32	; 0x20
 462:	31 a1       	ldd	r19, Z+33	; 0x21
 464:	82 a1       	ldd	r24, Z+34	; 0x22
 466:	93 a1       	ldd	r25, Z+35	; 0x23
 468:	28 17       	cp	r18, r24
 46a:	39 07       	cpc	r19, r25
 46c:	38 f4       	brcc	.+14     	; 0x47c <i2c_tinyS::peek()+0x26>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:90
    return i2c->Buffer[i2c->rxBufferIndex];
 46e:	80 a1       	ldd	r24, Z+32	; 0x20
 470:	91 a1       	ldd	r25, Z+33	; 0x21
 472:	e8 0f       	add	r30, r24
 474:	f9 1f       	adc	r31, r25
 476:	80 81       	ld	r24, Z
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	08 95       	ret
_ZN9i2c_tinyS4peekEv():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:89
    if(i2c->rxBufferIndex >= i2c->rxBufferLength) return -1;
    return i2c->Buffer[i2c->rxBufferIndex++];
}

int i2c_tinyS::peek_(struct i2cStruct* i2c) {
    if(i2c->rxBufferIndex >= i2c->rxBufferLength) return -1;
 47c:	8f ef       	ldi	r24, 0xFF	; 255
 47e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.h:105
 480:	08 95       	ret

00000482 <i2c_tinyS::read()>:
_ZN9i2c_tinyS4readEv():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.h:103
        inline size_t write(int n)           { return write((uint8_t)n); }
        size_t write(const uint8_t* data, size_t quantity);
        inline size_t write(const char* str) { write((const uint8_t*)str, strlen(str)); }
        inline int available(void) { return i2c->rxBufferLength - i2c->rxBufferIndex; }
        static int read_(struct i2cStruct* i2c);
        inline int read(void) { return read_(i2c); }
 482:	dc 01       	movw	r26, r24
 484:	1c 96       	adiw	r26, 0x0c	; 12
 486:	ed 91       	ld	r30, X+
 488:	fc 91       	ld	r31, X
 48a:	1d 97       	sbiw	r26, 0x0d	; 13
read_():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:84
        i2c->txBufferLength += quantity;
    }
}

int i2c_tinyS::read_(struct i2cStruct* i2c) {
    if(i2c->rxBufferIndex >= i2c->rxBufferLength) return -1;
 48c:	20 a1       	ldd	r18, Z+32	; 0x20
 48e:	31 a1       	ldd	r19, Z+33	; 0x21
 490:	82 a1       	ldd	r24, Z+34	; 0x22
 492:	93 a1       	ldd	r25, Z+35	; 0x23
 494:	28 17       	cp	r18, r24
 496:	39 07       	cpc	r19, r25
 498:	60 f4       	brcc	.+24     	; 0x4b2 <i2c_tinyS::read()+0x30>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:85
    return i2c->Buffer[i2c->rxBufferIndex++];
 49a:	80 a1       	ldd	r24, Z+32	; 0x20
 49c:	91 a1       	ldd	r25, Z+33	; 0x21
 49e:	9c 01       	movw	r18, r24
 4a0:	2f 5f       	subi	r18, 0xFF	; 255
 4a2:	3f 4f       	sbci	r19, 0xFF	; 255
 4a4:	31 a3       	std	Z+33, r19	; 0x21
 4a6:	20 a3       	std	Z+32, r18	; 0x20
 4a8:	e8 0f       	add	r30, r24
 4aa:	f9 1f       	adc	r31, r25
 4ac:	80 81       	ld	r24, Z
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	08 95       	ret
_ZN9i2c_tinyS4readEv():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:84
        i2c->txBufferLength += quantity;
    }
}

int i2c_tinyS::read_(struct i2cStruct* i2c) {
    if(i2c->rxBufferIndex >= i2c->rxBufferLength) return -1;
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.h:103
 4b6:	08 95       	ret

000004b8 <i2c_tinyS::available()>:
_ZN9i2c_tinyS9availableEv():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.h:101
        inline size_t write(long n)          { return write((uint8_t)n); }
        inline size_t write(unsigned int n)  { return write((uint8_t)n); }
        inline size_t write(int n)           { return write((uint8_t)n); }
        size_t write(const uint8_t* data, size_t quantity);
        inline size_t write(const char* str) { write((const uint8_t*)str, strlen(str)); }
        inline int available(void) { return i2c->rxBufferLength - i2c->rxBufferIndex; }
 4b8:	dc 01       	movw	r26, r24
 4ba:	1c 96       	adiw	r26, 0x0c	; 12
 4bc:	ed 91       	ld	r30, X+
 4be:	fc 91       	ld	r31, X
 4c0:	1d 97       	sbiw	r26, 0x0d	; 13
 4c2:	82 a1       	ldd	r24, Z+34	; 0x22
 4c4:	93 a1       	ldd	r25, Z+35	; 0x23
 4c6:	20 a1       	ldd	r18, Z+32	; 0x20
 4c8:	31 a1       	ldd	r19, Z+33	; 0x21
 4ca:	82 1b       	sub	r24, r18
 4cc:	93 0b       	sbc	r25, r19
 4ce:	08 95       	ret

000004d0 <requestEvent()>:
_Z12requestEventv():
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:84
// Handle a read of the IO pins or the Serial port
// If last_address was IO_REG (0x10) then return the status of the IO pins
// If last_address was LEN_REG (0xFD), return the MSB and LSB of the serial buffer length and store them in serAvailMSB/LSB
// If last_address was DATA_REG (0xFF), return up to SER_PACKET_SIZE bytes from the serial buffer and update serAvailMSB/LSB
void requestEvent()
{
 4d0:	cf 92       	push	r12
 4d2:	df 92       	push	r13
 4d4:	ef 92       	push	r14
 4d6:	ff 92       	push	r15
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	cd b7       	in	r28, 0x3d	; 61
 4e2:	de b7       	in	r29, 0x3e	; 62
 4e4:	28 97       	sbiw	r28, 0x08	; 8
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	de bf       	out	0x3e, r29	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	cd bf       	out	0x3d, r28	; 61
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:85
  if (last_address == IO_REG) // Return the status of the IO pins
 4f0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <last_address>
 4f4:	80 31       	cpi	r24, 0x10	; 16
 4f6:	09 f0       	breq	.+2      	; 0x4fa <requestEvent()+0x2a>
 4f8:	54 c0       	rjmp	.+168    	; 0x5a2 <requestEvent()+0xd2>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:89
  {
    // Read the IO pins one at a time and set or clear bits in IO_REGISTER appropriately
    
    if (digitalRead(SHDN) == SHDN__ON) { // If the SHDN pin is in its ON state (not necessarily that it is HIGH)
 4fa:	8a e0       	ldi	r24, 0x0A	; 10
 4fc:	cd dd       	rcall	.-1126   	; 0x98 <digitalRead>
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	21 f4       	brne	.+8      	; 0x50a <requestEvent()+0x3a>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:90
      IO_REGISTER |= IO_SHDN; // Set the SHDN bit in IO_REGISTER
 502:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <IO_REGISTER>
 506:	81 60       	ori	r24, 0x01	; 1
 508:	03 c0       	rjmp	.+6      	; 0x510 <requestEvent()+0x40>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:93
    }
    else {
      IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit in IO_REGISTER
 50a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <IO_REGISTER>
 50e:	8e 7f       	andi	r24, 0xFE	; 254
 510:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <IO_REGISTER>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:96
    }
    
    if (digitalRead(PWR_EN) == PWR_EN__ON) { // If the PWR_EN pin is in its ON state (not necessarily that it is HIGH)
 514:	83 e0       	ldi	r24, 0x03	; 3
 516:	c0 dd       	rcall	.-1152   	; 0x98 <digitalRead>
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	21 f4       	brne	.+8      	; 0x524 <requestEvent()+0x54>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:97
      IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit in IO_REGISTER
 51c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <IO_REGISTER>
 520:	82 60       	ori	r24, 0x02	; 2
 522:	03 c0       	rjmp	.+6      	; 0x52a <requestEvent()+0x5a>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:100
    }
    else {
      IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit in IO_REGISTER
 524:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <IO_REGISTER>
 528:	8d 7f       	andi	r24, 0xFD	; 253
 52a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <IO_REGISTER>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:103
    }
    
    if (digitalRead(ON_OFF) == ON_OFF__ON) { // If the ON_OFF pin is in its ON state (not necessarily that it is HIGH)
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	b3 dd       	rcall	.-1178   	; 0x98 <digitalRead>
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	21 f4       	brne	.+8      	; 0x53e <requestEvent()+0x6e>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:104
      IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit in IO_REGISTER
 536:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <IO_REGISTER>
 53a:	84 60       	ori	r24, 0x04	; 4
 53c:	03 c0       	rjmp	.+6      	; 0x544 <requestEvent()+0x74>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:107
    }
    else {
      IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit in IO_REGISTER
 53e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <IO_REGISTER>
 542:	8b 7f       	andi	r24, 0xFB	; 251
 544:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <IO_REGISTER>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:110
    }
    
    if (RI_FLAG == true) { // If the RI_FLAG is true (set by the ISR)
 548:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <RI_FLAG>
 54c:	81 30       	cpi	r24, 0x01	; 1
 54e:	21 f4       	brne	.+8      	; 0x558 <requestEvent()+0x88>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:111
      IO_REGISTER |= IO_RI; // Set the RI bit in IO_REGISTER
 550:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <IO_REGISTER>
 554:	88 60       	ori	r24, 0x08	; 8
 556:	03 c0       	rjmp	.+6      	; 0x55e <requestEvent()+0x8e>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:114
    }
    else {
      IO_REGISTER &= ~IO_RI; // Clear the RI bit in IO_REGISTER
 558:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <IO_REGISTER>
 55c:	87 7f       	andi	r24, 0xF7	; 247
 55e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <IO_REGISTER>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:117
    }
    
    if (digitalRead(NA) == NA__ON) { // If the NA pin is in its ON state (not necessarily that it is HIGH)
 562:	87 e0       	ldi	r24, 0x07	; 7
 564:	99 dd       	rcall	.-1230   	; 0x98 <digitalRead>
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	21 f4       	brne	.+8      	; 0x572 <requestEvent()+0xa2>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:118
      IO_REGISTER |= IO_NA; // Set the NA bit in IO_REGISTER
 56a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <IO_REGISTER>
 56e:	80 61       	ori	r24, 0x10	; 16
 570:	03 c0       	rjmp	.+6      	; 0x578 <requestEvent()+0xa8>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:121
    }
    else {
      IO_REGISTER &= ~IO_NA; // Clear the NA bit in IO_REGISTER
 572:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <IO_REGISTER>
 576:	8f 7e       	andi	r24, 0xEF	; 239
 578:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <IO_REGISTER>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:124
    }
    
    if (digitalRead(PGOOD) == PGOOD__ON) { // If the PGOOD pin is in its ON state (not necessarily that it is HIGH)
 57c:	88 e0       	ldi	r24, 0x08	; 8
 57e:	8c dd       	rcall	.-1256   	; 0x98 <digitalRead>
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	21 f4       	brne	.+8      	; 0x58c <requestEvent()+0xbc>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:125
      IO_REGISTER |= IO_PGOOD; // Set the PGOOD bit in IO_REGISTER
 584:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <IO_REGISTER>
 588:	80 62       	ori	r24, 0x20	; 32
 58a:	03 c0       	rjmp	.+6      	; 0x592 <requestEvent()+0xc2>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:128
    }
    else {
      IO_REGISTER &= ~IO_PGOOD; // Clear the PGOOD bit in IO_REGISTER
 58c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <IO_REGISTER>
 590:	8f 7d       	andi	r24, 0xDF	; 223
 592:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <IO_REGISTER>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:132
    }
  
    // Now write IO_REGISTER to I2C
    Wire.write(IO_REGISTER);
 596:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <IO_REGISTER>
write():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/Wire.cpp:851
  return value;
}
#else //WIRE_SLAVE_ONLY
size_t TwoWire::write(uint8_t data) {
  size_t numBytes = 0;
  numBytes = TinyWireS.write(data);
 59a:	89 ee       	ldi	r24, 0xE9	; 233
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	23 df       	rcall	.-442    	; 0x3e6 <i2c_tinyS::write(unsigned char)>
 5a0:	5b c0       	rjmp	.+182    	; 0x658 <requestEvent()+0x188>
_Z12requestEventv():
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:138

    // Reset last_address to zero
    last_address = 0;
  }

  else if (last_address == LEN_REG) // Return the MSB and LSB of the serial buffer length and store them in serAvailMSB/LSB
 5a2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <last_address>
 5a6:	8d 3f       	cpi	r24, 0xFD	; 253
 5a8:	91 f4       	brne	.+36     	; 0x5ce <requestEvent()+0xfe>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:141
  {
    //Check how many bytes are available in the serial buffer
    uint16_t avail = Serial.available();
 5aa:	87 e9       	ldi	r24, 0x97	; 151
 5ac:	91 e0       	ldi	r25, 0x01	; 1
 5ae:	de de       	rcall	.-580    	; 0x36c <HardwareSerial::available()>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:144
    
    //Store the MSB for the subsequent requestEvent
    serAvailMSB = (uint8_t)((avail & 0xFF00) >> 8);
 5b0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <serAvailMSB>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:147
    
    //Store the LSB for the subsequent  requestEvent
    serAvailLSB = (uint8_t)(avail & 0xFF);
 5b4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:150

    uint8_t buff[2];
    buff[0] = serAvailMSB;
 5b8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <serAvailMSB>
 5bc:	89 83       	std	Y+1, r24	; 0x01
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:151
    buff[1] = serAvailLSB;
 5be:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 5c2:	8a 83       	std	Y+2, r24	; 0x02
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:153

    Wire.write(buff, 2); // Return the available bytes in MSB, LSB format
 5c4:	62 e0       	ldi	r22, 0x02	; 2
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	ce 01       	movw	r24, r28
 5ca:	01 96       	adiw	r24, 0x01	; 1
 5cc:	44 c0       	rjmp	.+136    	; 0x656 <requestEvent()+0x186>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:159

    // Reset last_address to zero
    last_address = 0;
  }

  else if (last_address == DATA_REG) // Return up to SER_PACKET_SIZE bytes from the serial buffer and update serAvailMSB/LSB
 5ce:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <last_address>
 5d2:	8f 3f       	cpi	r24, 0xFF	; 255
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <requestEvent()+0x108>
 5d6:	42 c0       	rjmp	.+132    	; 0x65c <requestEvent()+0x18c>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:162
  {
    // Check how many bytes the Master is expecting us to send
    uint16_t avail = (((uint16_t)serAvailMSB) << 8) | (uint16_t)serAvailLSB;
 5d8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <serAvailMSB>
 5dc:	00 91 20 01 	lds	r16, 0x0120	; 0x800120 <__data_end>
 5e0:	10 e0       	ldi	r17, 0x00	; 0
 5e2:	18 2b       	or	r17, r24
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:164
    uint8_t buff[SER_PACKET_SIZE];
    if (avail > SER_PACKET_SIZE) // If there are more than SER_PACKET_SIZE bytes to write
 5e4:	09 30       	cpi	r16, 0x09	; 9
 5e6:	11 05       	cpc	r17, r1
 5e8:	e0 f0       	brcs	.+56     	; 0x622 <requestEvent()+0x152>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:166
    {
      avail = avail - SER_PACKET_SIZE; // Decrease the available bytes by SER_PACKET_SIZE
 5ea:	08 50       	subi	r16, 0x08	; 8
 5ec:	11 09       	sbc	r17, r1
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:168
      // Update the number of available bytes and leave last_address set to DATA_REG
      serAvailMSB = (uint8_t)((avail & 0xFF00) >> 8);
 5ee:	10 93 21 01 	sts	0x0121, r17	; 0x800121 <serAvailMSB>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:169
      serAvailLSB = (uint8_t)(avail & 0xFF);
 5f2:	00 93 20 01 	sts	0x0120, r16	; 0x800120 <__data_end>
 5f6:	8e 01       	movw	r16, r28
 5f8:	0f 5f       	subi	r16, 0xFF	; 255
 5fa:	1f 4f       	sbci	r17, 0xFF	; 255
 5fc:	6e 01       	movw	r12, r28
 5fe:	89 e0       	ldi	r24, 0x09	; 9
 600:	c8 0e       	add	r12, r24
 602:	d1 1c       	adc	r13, r1
 604:	78 01       	movw	r14, r16
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:172
      for (int i = 0; i < SER_PACKET_SIZE; i++) // For each of the bytes
      {
        buff[i] = Serial.read(); // Read a byte from the serial buffer
 606:	87 e9       	ldi	r24, 0x97	; 151
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	81 de       	rcall	.-766    	; 0x30e <HardwareSerial::read()>
 60c:	f8 01       	movw	r30, r16
 60e:	81 93       	st	Z+, r24
 610:	8f 01       	movw	r16, r30
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:170
    {
      avail = avail - SER_PACKET_SIZE; // Decrease the available bytes by SER_PACKET_SIZE
      // Update the number of available bytes and leave last_address set to DATA_REG
      serAvailMSB = (uint8_t)((avail & 0xFF00) >> 8);
      serAvailLSB = (uint8_t)(avail & 0xFF);
      for (int i = 0; i < SER_PACKET_SIZE; i++) // For each of the bytes
 612:	ec 15       	cp	r30, r12
 614:	fd 05       	cpc	r31, r13
 616:	b9 f7       	brne	.-18     	; 0x606 <requestEvent()+0x136>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:174
      {
        buff[i] = Serial.read(); // Read a byte from the serial buffer
      }
      Wire.write(buff, SER_PACKET_SIZE); // Write the bytes
 618:	68 e0       	ldi	r22, 0x08	; 8
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	c7 01       	movw	r24, r14
 61e:	fc de       	rcall	.-520    	; 0x418 <TwoWire::write(unsigned char const*, unsigned int) [clone .constprop.6]>
 620:	1d c0       	rjmp	.+58     	; 0x65c <requestEvent()+0x18c>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:176
    }
    else if (avail > 0) // If there are <= SER_PACKET_SIZE bytes left (but more than zero)
 622:	01 15       	cp	r16, r1
 624:	11 05       	cpc	r17, r1
 626:	c1 f0       	breq	.+48     	; 0x658 <requestEvent()+0x188>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:178
    {
      serAvailMSB = 0; // Zero the number of available bytes (redundant?)
 628:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <serAvailMSB>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:179
      serAvailLSB = 0;
 62c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
 630:	ce 01       	movw	r24, r28
 632:	01 96       	adiw	r24, 0x01	; 1
 634:	7c 01       	movw	r14, r24
 636:	6c 01       	movw	r12, r24
 638:	c6 01       	movw	r24, r12
 63a:	8e 19       	sub	r24, r14
 63c:	9f 09       	sbc	r25, r15
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:180
      for (int i = 0; i < avail; i++) // For each byte
 63e:	80 17       	cp	r24, r16
 640:	91 07       	cpc	r25, r17
 642:	38 f4       	brcc	.+14     	; 0x652 <requestEvent()+0x182>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:182
      {
        buff[i] = Serial.read(); // Read a byte from the serial buffer
 644:	87 e9       	ldi	r24, 0x97	; 151
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	62 de       	rcall	.-828    	; 0x30e <HardwareSerial::read()>
 64a:	f6 01       	movw	r30, r12
 64c:	81 93       	st	Z+, r24
 64e:	6f 01       	movw	r12, r30
 650:	f3 cf       	rjmp	.-26     	; 0x638 <requestEvent()+0x168>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:184
      }
      Wire.write(buff, avail); // Write the bytes
 652:	b8 01       	movw	r22, r16
 654:	c7 01       	movw	r24, r14
 656:	e0 de       	rcall	.-576    	; 0x418 <TwoWire::write(unsigned char const*, unsigned int) [clone .constprop.6]>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:189
      last_address = 0; // Reset last_address to zero now all bytes have been written
    }
    else // If there are zero bytes to send - this should hopefully be redundant/impossible?
    {
      last_address = 0; // Reset last_address to zero
 658:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <last_address>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:192
    }
  }
}
 65c:	28 96       	adiw	r28, 0x08	; 8
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	f8 94       	cli
 662:	de bf       	out	0x3e, r29	; 62
 664:	0f be       	out	0x3f, r0	; 63
 666:	cd bf       	out	0x3d, r28	; 61
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	1f 91       	pop	r17
 66e:	0f 91       	pop	r16
 670:	ff 90       	pop	r15
 672:	ef 90       	pop	r14
 674:	df 90       	pop	r13
 676:	cf 90       	pop	r12
 678:	08 95       	ret

0000067a <receiveEvent(int)>:
_Z12receiveEventi():
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:9
// ================
// Handle a write to the IO pins or the Serial port
// If the first byte is IO_REG (0x10), read one more byte if present and write the contents to the IO pins.
// If the first byte is LEN_REG (0xFD), store it in last_address so we know what to do during the next requestEvent
// If the first byte is DATA_REG (0xFF), keep reading bytes (if any) and write them to the 9603 serial port.
void receiveEvent(int numberOfBytesReceived) {
 67a:	0f 93       	push	r16
 67c:	1f 93       	push	r17
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:10
  if (numberOfBytesReceived > 0) { // Check that we received some data (!) (hopefully redundant!)
 682:	18 16       	cp	r1, r24
 684:	19 06       	cpc	r1, r25
 686:	0c f0       	brlt	.+2      	; 0x68a <receiveEvent(int)+0x10>
 688:	59 c0       	rjmp	.+178    	; 0x73c <receiveEvent(int)+0xc2>
 68a:	ec 01       	movw	r28, r24
read():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/Wire.cpp:879
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;
    value = TinyWireS.read();
 68c:	89 ee       	ldi	r24, 0xE9	; 233
 68e:	91 e0       	ldi	r25, 0x01	; 1
 690:	f8 de       	rcall	.-528    	; 0x482 <i2c_tinyS::read()>
_Z12receiveEventi():
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:13
    
    uint8_t incoming = Wire.read(); // Read the first byte
    last_address = incoming; // Store this byte in last_address so we know what to do during the next requestEvent
 692:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <last_address>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:15

    if (incoming == IO_REG) { // Does the Master want to read or set the I/O pins?
 696:	80 31       	cpi	r24, 0x10	; 16
 698:	71 f5       	brne	.+92     	; 0x6f6 <receiveEvent(int)+0x7c>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:16
      if (numberOfBytesReceived > 1) { // Did the Master send a second byte to set the I/O pins?
 69a:	c1 30       	cpi	r28, 0x01	; 1
 69c:	d1 05       	cpc	r29, r1
 69e:	09 f4       	brne	.+2      	; 0x6a2 <receiveEvent(int)+0x28>
 6a0:	4d c0       	rjmp	.+154    	; 0x73c <receiveEvent(int)+0xc2>
read():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/Wire.cpp:879
 6a2:	89 ee       	ldi	r24, 0xE9	; 233
 6a4:	91 e0       	ldi	r25, 0x01	; 1
 6a6:	ed de       	rcall	.-550    	; 0x482 <i2c_tinyS::read()>
 6a8:	18 2f       	mov	r17, r24
_Z12receiveEventi():
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:19
        uint8_t incoming2 = Wire.read(); // Read the second byte

        if (incoming2 & IO_SHDN) { // If the SHDN bit is ON
 6aa:	80 ff       	sbrs	r24, 0
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <receiveEvent(int)+0x38>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:20
          digitalWrite(SHDN, SHDN__ON); // Turn the pin ON
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <receiveEvent(int)+0x3a>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:23
        }
        else {
          digitalWrite(SHDN, SHDN__OFF); // Turn the pin OFF
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	8a e0       	ldi	r24, 0x0A	; 10
 6b6:	37 dd       	rcall	.-1426   	; 0x126 <digitalWrite>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:26
        }
        
        if (incoming2 & IO_PWR_EN) { // If the PWR_EN bit is ON
 6b8:	11 ff       	sbrs	r17, 1
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <receiveEvent(int)+0x46>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:27
          digitalWrite(PWR_EN, PWR_EN__ON); // Turn the pin ON
 6bc:	61 e0       	ldi	r22, 0x01	; 1
 6be:	01 c0       	rjmp	.+2      	; 0x6c2 <receiveEvent(int)+0x48>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:30
        }
        else {
          digitalWrite(PWR_EN, PWR_EN__OFF); // Turn the pin OFF
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	83 e0       	ldi	r24, 0x03	; 3
 6c4:	30 dd       	rcall	.-1440   	; 0x126 <digitalWrite>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:33
        }
        
        if (incoming2 & IO_ON_OFF) { // If the ON_OFF bit is ON
 6c6:	12 ff       	sbrs	r17, 2
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <receiveEvent(int)+0x54>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:34
          digitalWrite(ON_OFF, ON_OFF__ON); // Turn the pin ON
 6ca:	61 e0       	ldi	r22, 0x01	; 1
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <receiveEvent(int)+0x56>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:37
        }
        else {
          digitalWrite(ON_OFF, ON_OFF__OFF); // Turn the pin OFF
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	29 dd       	rcall	.-1454   	; 0x126 <digitalWrite>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:40
        }
        
        if ((incoming2 & IO_RI) == 0x00) { // If the RI bit is clear
 6d4:	13 ff       	sbrs	r17, 3
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:41
          RI_FLAG = false; // Clear the RI flag
 6d6:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <RI_FLAG>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:44
        }
      }
      if (numberOfBytesReceived > 2) // Did we receive any unexpected extra data?
 6da:	c2 30       	cpi	r28, 0x02	; 2
 6dc:	d1 05       	cpc	r29, r1
 6de:	71 f1       	breq	.+92     	; 0x73c <receiveEvent(int)+0xc2>
 6e0:	02 e0       	ldi	r16, 0x02	; 2
 6e2:	10 e0       	ldi	r17, 0x00	; 0
read():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/Wire.cpp:879
 6e4:	89 ee       	ldi	r24, 0xE9	; 233
 6e6:	91 e0       	ldi	r25, 0x01	; 1
 6e8:	cc de       	rcall	.-616    	; 0x482 <i2c_tinyS::read()>
_Z12receiveEventi():
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:46
      {
        for (int i = 2; i < numberOfBytesReceived; i++) // If we did, mop up the extra bytes - hopefully redundant?!
 6ea:	0f 5f       	subi	r16, 0xFF	; 255
 6ec:	1f 4f       	sbci	r17, 0xFF	; 255
 6ee:	0c 17       	cp	r16, r28
 6f0:	1d 07       	cpc	r17, r29
 6f2:	c1 f7       	brne	.-16     	; 0x6e4 <receiveEvent(int)+0x6a>
 6f4:	23 c0       	rjmp	.+70     	; 0x73c <receiveEvent(int)+0xc2>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:53
          Wire.read();
        }
      }
    }

    else if (incoming == DATA_REG) { // Does the Master want to write serial data to the 9603N?
 6f6:	8f 3f       	cpi	r24, 0xFF	; 255
 6f8:	91 f4       	brne	.+36     	; 0x71e <receiveEvent(int)+0xa4>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:54
      if (numberOfBytesReceived > 1) // If the Master sent any serial data, write it to the 9603 now
 6fa:	c1 30       	cpi	r28, 0x01	; 1
 6fc:	d1 05       	cpc	r29, r1
 6fe:	f1 f0       	breq	.+60     	; 0x73c <receiveEvent(int)+0xc2>
 700:	01 e0       	ldi	r16, 0x01	; 1
 702:	10 e0       	ldi	r17, 0x00	; 0
read():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/Wire.cpp:879
 704:	89 ee       	ldi	r24, 0xE9	; 233
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	bc de       	rcall	.-648    	; 0x482 <i2c_tinyS::read()>
_Z12receiveEventi():
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:59
      {
        for (int i = 1; i < numberOfBytesReceived; i++)
        {
          uint8_t incoming2 = Wire.read();
          Serial.write(incoming2);
 70a:	68 2f       	mov	r22, r24
 70c:	87 e9       	ldi	r24, 0x97	; 151
 70e:	91 e0       	ldi	r25, 0x01	; 1
 710:	dc dd       	rcall	.-1096   	; 0x2ca <HardwareSerial::write(unsigned char)>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:56
    }

    else if (incoming == DATA_REG) { // Does the Master want to write serial data to the 9603N?
      if (numberOfBytesReceived > 1) // If the Master sent any serial data, write it to the 9603 now
      {
        for (int i = 1; i < numberOfBytesReceived; i++)
 712:	0f 5f       	subi	r16, 0xFF	; 255
 714:	1f 4f       	sbci	r17, 0xFF	; 255
 716:	0c 17       	cp	r16, r28
 718:	1d 07       	cpc	r17, r29
 71a:	a4 f3       	brlt	.-24     	; 0x704 <receiveEvent(int)+0x8a>
 71c:	0f c0       	rjmp	.+30     	; 0x73c <receiveEvent(int)+0xc2>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:64
          Serial.write(incoming2);
        }
      }
    }

    else if (incoming == LEN_REG) { // Does the Master want to read the available serial length?
 71e:	8d 3f       	cpi	r24, 0xFD	; 253
 720:	69 f4       	brne	.+26     	; 0x73c <receiveEvent(int)+0xc2>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:66
      // We shouldn't need to do anything (except update last_address)
      if (numberOfBytesReceived > 1) // Did we receive any unexpected extra data?
 722:	c1 30       	cpi	r28, 0x01	; 1
 724:	d1 05       	cpc	r29, r1
 726:	51 f0       	breq	.+20     	; 0x73c <receiveEvent(int)+0xc2>
 728:	01 e0       	ldi	r16, 0x01	; 1
 72a:	10 e0       	ldi	r17, 0x00	; 0
read():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/Wire.cpp:879
 72c:	89 ee       	ldi	r24, 0xE9	; 233
 72e:	91 e0       	ldi	r25, 0x01	; 1
 730:	a8 de       	rcall	.-688    	; 0x482 <i2c_tinyS::read()>
_Z12receiveEventi():
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:68
      {
        for (int i = 1; i < numberOfBytesReceived; i++) // If we did, mop up the extra bytes - hopefully redundant?!
 732:	0f 5f       	subi	r16, 0xFF	; 255
 734:	1f 4f       	sbci	r17, 0xFF	; 255
 736:	0c 17       	cp	r16, r28
 738:	1d 07       	cpc	r17, r29
 73a:	c4 f3       	brlt	.-16     	; 0x72c <receiveEvent(int)+0xb2>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/interrupts.ino:75
          Wire.read();
        }
      }
    }
  }
}
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	1f 91       	pop	r17
 742:	0f 91       	pop	r16
 744:	08 95       	ret

00000746 <__cxa_pure_virtual>:
__cxa_pure_virtual():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/abi.cpp:27
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((weak, __noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
 746:	4a d3       	rcall	.+1684   	; 0xddc <abort>

00000748 <__vector_11>:
__vector_11():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:79
volatile unsigned long millis_timer_overflow_count = 0;
volatile unsigned long millis_timer_millis = 0;
static unsigned char millis_timer_fract = 0;

ISR(MILLISTIMER_OVF_vect)
{
 748:	1f 92       	push	r1
 74a:	0f 92       	push	r0
 74c:	0f b6       	in	r0, 0x3f	; 63
 74e:	0f 92       	push	r0
 750:	11 24       	eor	r1, r1
 752:	2f 93       	push	r18
 754:	3f 93       	push	r19
 756:	8f 93       	push	r24
 758:	9f 93       	push	r25
 75a:	af 93       	push	r26
 75c:	bf 93       	push	r27
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:82
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = millis_timer_millis;
 75e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <millis_timer_millis>
 762:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <millis_timer_millis+0x1>
 766:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <millis_timer_millis+0x2>
 76a:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <millis_timer_millis+0x3>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:83
  unsigned char f = millis_timer_fract;
 76e:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <millis_timer_fract>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:95
    f -= FRACT_MAX;
    m += 1;
  }
...rmv */

  f += FRACT_INC;
 772:	26 e0       	ldi	r18, 0x06	; 6
 774:	23 0f       	add	r18, r19
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:97

  if (f >= FRACT_MAX)
 776:	2d 37       	cpi	r18, 0x7D	; 125
 778:	30 f0       	brcs	.+12     	; 0x786 <__vector_11+0x3e>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:99
  {
    f -= FRACT_MAX;
 77a:	29 e8       	ldi	r18, 0x89	; 137
 77c:	23 0f       	add	r18, r19
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:100
    m = m + MILLIS_INC + 1;
 77e:	03 96       	adiw	r24, 0x03	; 3
 780:	a1 1d       	adc	r26, r1
 782:	b1 1d       	adc	r27, r1
 784:	03 c0       	rjmp	.+6      	; 0x78c <__vector_11+0x44>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:104
  }
  else
  {
    m += MILLIS_INC;
 786:	02 96       	adiw	r24, 0x02	; 2
 788:	a1 1d       	adc	r26, r1
 78a:	b1 1d       	adc	r27, r1
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:107
  }

  millis_timer_fract = f;
 78c:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <millis_timer_fract>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:108
  millis_timer_millis = m;
 790:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <millis_timer_millis>
 794:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <millis_timer_millis+0x1>
 798:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <millis_timer_millis+0x2>
 79c:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <millis_timer_millis+0x3>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:109
  millis_timer_overflow_count++;
 7a0:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <millis_timer_overflow_count>
 7a4:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <millis_timer_overflow_count+0x1>
 7a8:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <millis_timer_overflow_count+0x2>
 7ac:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <millis_timer_overflow_count+0x3>
 7b0:	01 96       	adiw	r24, 0x01	; 1
 7b2:	a1 1d       	adc	r26, r1
 7b4:	b1 1d       	adc	r27, r1
 7b6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <millis_timer_overflow_count>
 7ba:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <millis_timer_overflow_count+0x1>
 7be:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <millis_timer_overflow_count+0x2>
 7c2:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <millis_timer_overflow_count+0x3>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:110
}
 7c6:	bf 91       	pop	r27
 7c8:	af 91       	pop	r26
 7ca:	9f 91       	pop	r25
 7cc:	8f 91       	pop	r24
 7ce:	3f 91       	pop	r19
 7d0:	2f 91       	pop	r18
 7d2:	0f 90       	pop	r0
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	0f 90       	pop	r0
 7d8:	1f 90       	pop	r1
 7da:	18 95       	reti

000007dc <__vector_1>:
__vector_1():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/WInterrupts.c:124
  }
}

#if NUMBER_EXTERNAL_INTERRUPTS >= 1
ISR(EXTERNAL_INTERRUPT_0_vect)
{
 7dc:	1f 92       	push	r1
 7de:	0f 92       	push	r0
 7e0:	0f b6       	in	r0, 0x3f	; 63
 7e2:	0f 92       	push	r0
 7e4:	11 24       	eor	r1, r1
 7e6:	2f 93       	push	r18
 7e8:	3f 93       	push	r19
 7ea:	4f 93       	push	r20
 7ec:	5f 93       	push	r21
 7ee:	6f 93       	push	r22
 7f0:	7f 93       	push	r23
 7f2:	8f 93       	push	r24
 7f4:	9f 93       	push	r25
 7f6:	af 93       	push	r26
 7f8:	bf 93       	push	r27
 7fa:	ef 93       	push	r30
 7fc:	ff 93       	push	r31
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/WInterrupts.c:125
  if(intFunc[EXTERNAL_INTERRUPT_0])
 7fe:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <intFunc>
 802:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <intFunc+0x1>
 806:	89 2b       	or	r24, r25
 808:	29 f0       	breq	.+10     	; 0x814 <__vector_1+0x38>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/WInterrupts.c:126
    intFunc[EXTERNAL_INTERRUPT_0]();
 80a:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <intFunc>
 80e:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <intFunc+0x1>
 812:	09 95       	icall
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/WInterrupts.c:127
}
 814:	ff 91       	pop	r31
 816:	ef 91       	pop	r30
 818:	bf 91       	pop	r27
 81a:	af 91       	pop	r26
 81c:	9f 91       	pop	r25
 81e:	8f 91       	pop	r24
 820:	7f 91       	pop	r23
 822:	6f 91       	pop	r22
 824:	5f 91       	pop	r21
 826:	4f 91       	pop	r20
 828:	3f 91       	pop	r19
 82a:	2f 91       	pop	r18
 82c:	0f 90       	pop	r0
 82e:	0f be       	out	0x3f, r0	; 63
 830:	0f 90       	pop	r0
 832:	1f 90       	pop	r1
 834:	18 95       	reti

00000836 <__vector_26>:
__vector_26():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:144

//#if defined(SIG_USART1_RECV)
#if defined(USART1_RX_vect)
  //ISR(SIG_USART1_RECV)
  ISR(USART1_RX_vect)
  {
 836:	1f 92       	push	r1
 838:	0f 92       	push	r0
 83a:	0f b6       	in	r0, 0x3f	; 63
 83c:	0f 92       	push	r0
 83e:	11 24       	eor	r1, r1
 840:	2f 93       	push	r18
 842:	3f 93       	push	r19
 844:	4f 93       	push	r20
 846:	6f 93       	push	r22
 848:	7f 93       	push	r23
 84a:	8f 93       	push	r24
 84c:	9f 93       	push	r25
 84e:	ef 93       	push	r30
 850:	ff 93       	push	r31
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:145
    unsigned char c = UDR1;
 852:	40 91 90 00 	lds	r20, 0x0090	; 0x800090 <__EEPROM_REGION_LENGTH__+0x7f0090>
store_char():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:71
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *rx_buffer)
{
  int i = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
 856:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <rx_buffer1+0x20>
 85a:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <rx_buffer1+0x21>
 85e:	c9 01       	movw	r24, r18
 860:	01 96       	adiw	r24, 0x01	; 1
 862:	8f 71       	andi	r24, 0x1F	; 31
 864:	99 27       	eor	r25, r25
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:77

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
 866:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <rx_buffer1+0x22>
 86a:	70 91 53 01 	lds	r23, 0x0153	; 0x800153 <rx_buffer1+0x23>
 86e:	86 17       	cp	r24, r22
 870:	97 07       	cpc	r25, r23
 872:	41 f0       	breq	.+16     	; 0x884 <__vector_26+0x4e>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:78
    rx_buffer->buffer[rx_buffer->head] = c;
 874:	f9 01       	movw	r30, r18
 876:	e0 5d       	subi	r30, 0xD0	; 208
 878:	fe 4f       	sbci	r31, 0xFE	; 254
 87a:	40 83       	st	Z, r20
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:79
    rx_buffer->head = i;
 87c:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <rx_buffer1+0x21>
 880:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <rx_buffer1+0x20>
__vector_26():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:147
  //ISR(SIG_USART1_RECV)
  ISR(USART1_RX_vect)
  {
    unsigned char c = UDR1;
    store_char(c, &rx_buffer1);
  }
 884:	ff 91       	pop	r31
 886:	ef 91       	pop	r30
 888:	9f 91       	pop	r25
 88a:	8f 91       	pop	r24
 88c:	7f 91       	pop	r23
 88e:	6f 91       	pop	r22
 890:	4f 91       	pop	r20
 892:	3f 91       	pop	r19
 894:	2f 91       	pop	r18
 896:	0f 90       	pop	r0
 898:	0f be       	out	0x3f, r0	; 63
 89a:	0f 90       	pop	r0
 89c:	1f 90       	pop	r1
 89e:	18 95       	reti

000008a0 <__vector_22>:
__vector_22():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:112
//#elif defined(SIG_USART_RECV)
#elif defined(USART0_RX_vect)
  // fixed by Mark Sproul this is on the 644/644p
  //ISR(SIG_USART_RECV)
  ISR(USART0_RX_vect)
  {
 8a0:	1f 92       	push	r1
 8a2:	0f 92       	push	r0
 8a4:	0f b6       	in	r0, 0x3f	; 63
 8a6:	0f 92       	push	r0
 8a8:	11 24       	eor	r1, r1
 8aa:	2f 93       	push	r18
 8ac:	3f 93       	push	r19
 8ae:	4f 93       	push	r20
 8b0:	6f 93       	push	r22
 8b2:	7f 93       	push	r23
 8b4:	8f 93       	push	r24
 8b6:	9f 93       	push	r25
 8b8:	ef 93       	push	r30
 8ba:	ff 93       	push	r31
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:114
  #if defined(UDR0)
    unsigned char c  =  UDR0;
 8bc:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
store_char():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:71
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *rx_buffer)
{
  int i = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
 8c0:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <rx_buffer+0x20>
 8c4:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <rx_buffer+0x21>
 8c8:	c9 01       	movw	r24, r18
 8ca:	01 96       	adiw	r24, 0x01	; 1
 8cc:	8f 71       	andi	r24, 0x1F	; 31
 8ce:	99 27       	eor	r25, r25
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:77

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
 8d0:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <rx_buffer+0x22>
 8d4:	70 91 96 01 	lds	r23, 0x0196	; 0x800196 <rx_buffer+0x23>
 8d8:	86 17       	cp	r24, r22
 8da:	97 07       	cpc	r25, r23
 8dc:	41 f0       	breq	.+16     	; 0x8ee <__vector_22+0x4e>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:78
    rx_buffer->buffer[rx_buffer->head] = c;
 8de:	f9 01       	movw	r30, r18
 8e0:	ed 58       	subi	r30, 0x8D	; 141
 8e2:	fe 4f       	sbci	r31, 0xFE	; 254
 8e4:	40 83       	st	Z, r20
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:79
    rx_buffer->head = i;
 8e6:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <rx_buffer+0x21>
 8ea:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <rx_buffer+0x20>
__vector_22():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:121
    unsigned char c  =  UDR;  //  atmega8, atmega32
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
 8ee:	ff 91       	pop	r31
 8f0:	ef 91       	pop	r30
 8f2:	9f 91       	pop	r25
 8f4:	8f 91       	pop	r24
 8f6:	7f 91       	pop	r23
 8f8:	6f 91       	pop	r22
 8fa:	4f 91       	pop	r20
 8fc:	3f 91       	pop	r19
 8fe:	2f 91       	pop	r18
 900:	0f 90       	pop	r0
 902:	0f be       	out	0x3f, r0	; 63
 904:	0f 90       	pop	r0
 906:	1f 90       	pop	r1
 908:	18 95       	reti

0000090a <__vector_29>:
__vector_29():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:168
        }
    }
    TWSCRB = (B0011 | TWI_HIGH_NOISE_MODE);
}

ISR(TWI_SLAVE_vect) {
 90a:	1f 92       	push	r1
 90c:	0f 92       	push	r0
 90e:	0f b6       	in	r0, 0x3f	; 63
 910:	0f 92       	push	r0
 912:	11 24       	eor	r1, r1
 914:	2f 93       	push	r18
 916:	3f 93       	push	r19
 918:	4f 93       	push	r20
 91a:	5f 93       	push	r21
 91c:	6f 93       	push	r22
 91e:	7f 93       	push	r23
 920:	8f 93       	push	r24
 922:	9f 93       	push	r25
 924:	af 93       	push	r26
 926:	bf 93       	push	r27
 928:	cf 93       	push	r28
 92a:	ef 93       	push	r30
 92c:	ff 93       	push	r31
i2c_isr_handler():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:105
    return i2c->Buffer[i2c->rxBufferIndex];
}

void i2c_isr_handler() {
    struct i2cStruct *i2c = &(i2c_tinyS::i2cData);
    byte status = TWSSRA;
 92e:	c0 91 a3 00 	lds	r28, 0x00A3	; 0x8000a3 <__EEPROM_REGION_LENGTH__+0x7f00a3>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:106
    if ((status & (_BV(TWC) | _BV(TWBE)))) {
 932:	8c 2f       	mov	r24, r28
 934:	8c 70       	andi	r24, 0x0C	; 12
 936:	81 f0       	breq	.+32     	; 0x958 <__vector_29+0x4e>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:107
        i2c->startCount = -1;
 938:	8f ef       	ldi	r24, 0xFF	; 255
 93a:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <i2c_tinyS::i2cData+0x28>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:108
        CLEAR_TENBIT;
 93e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <i2c_tinyS::i2cData+0x29>
 942:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <i2c_tinyS::i2cData+0x2a>
 946:	9f 77       	andi	r25, 0x7F	; 127
 948:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <i2c_tinyS::i2cData+0x2a>
 94c:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <i2c_tinyS::i2cData+0x29>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:109
        TWSSRA |= (_BV(TWASIF) | _BV(TWDIF) | _BV(TWBE));
 950:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <__EEPROM_REGION_LENGTH__+0x7f00a3>
 954:	84 6c       	ori	r24, 0xC4	; 196
 956:	20 c0       	rjmp	.+64     	; 0x998 <__vector_29+0x8e>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:112
        return;
    }
    if ((status & _BV(TWASIF)) || IS_TENBIT) {
 958:	c6 fd       	sbrc	r28, 6
 95a:	06 c0       	rjmp	.+12     	; 0x968 <__vector_29+0x5e>
 95c:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <i2c_tinyS::i2cData+0x29>
 960:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <i2c_tinyS::i2cData+0x2a>
 964:	97 ff       	sbrs	r25, 7
 966:	90 c0       	rjmp	.+288    	; 0xa88 <__vector_29+0x17e>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:113
        if ((status & _BV(TWAS))) {
 968:	c0 fd       	sbrc	r28, 0
 96a:	19 c0       	rjmp	.+50     	; 0x99e <__vector_29+0x94>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:137
                i2c->txBufferLength = 0;
                if (i2c->user_onRequest != (void *)NULL) i2c->user_onRequest();
                i2c->txBufferIndex = 0;
            } else i2c->rxBufferLength = 0;
        } else {
            if ((status & _BV(TWDIR))) {
 96c:	c1 ff       	sbrs	r28, 1
 96e:	7b c0       	rjmp	.+246    	; 0xa66 <__vector_29+0x15c>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:138
                if (i2c->user_onStop != (void *)NULL) i2c->user_onStop();
 970:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <i2c_tinyS::i2cData+0x31>
 974:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <i2c_tinyS::i2cData+0x32>
 978:	30 97       	sbiw	r30, 0x00	; 0
 97a:	09 f0       	breq	.+2      	; 0x97e <__vector_29+0x74>
 97c:	09 95       	icall
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:145
                if (i2c->user_onReceive != (void *)NULL) {
                    i2c->rxBufferIndex = 0;
                    i2c->user_onReceive(i2c->rxBufferLength);
                }
            }
            i2c->startCount = -1;
 97e:	8f ef       	ldi	r24, 0xFF	; 255
 980:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <i2c_tinyS::i2cData+0x28>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:146
            CLEAR_TENBIT;
 984:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <i2c_tinyS::i2cData+0x29>
 988:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <i2c_tinyS::i2cData+0x2a>
 98c:	9f 77       	andi	r25, 0x7F	; 127
 98e:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <i2c_tinyS::i2cData+0x2a>
 992:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <i2c_tinyS::i2cData+0x29>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:147
            TWSSRA = _BV(TWASIF);
 996:	80 e4       	ldi	r24, 0x40	; 64
 998:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <__EEPROM_REGION_LENGTH__+0x7f00a3>
 99c:	b5 c0       	rjmp	.+362    	; 0xb08 <__vector_29+0x1fe>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:114
        TWSSRA |= (_BV(TWASIF) | _BV(TWDIF) | _BV(TWBE));
        return;
    }
    if ((status & _BV(TWASIF)) || IS_TENBIT) {
        if ((status & _BV(TWAS))) {
            if (IS_TENBIT) i2c->Addr = (((i2c->Addr & B110) << 7) | TWSD);
 99e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <i2c_tinyS::i2cData+0x29>
 9a2:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <i2c_tinyS::i2cData+0x2a>
 9a6:	97 ff       	sbrs	r25, 7
 9a8:	13 c0       	rjmp	.+38     	; 0x9d0 <__vector_29+0xc6>
 9aa:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <i2c_tinyS::i2cData+0x29>
 9ae:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <i2c_tinyS::i2cData+0x2a>
 9b2:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__EEPROM_REGION_LENGTH__+0x7f00a0>
 9b6:	86 70       	andi	r24, 0x06	; 6
 9b8:	99 27       	eor	r25, r25
 9ba:	96 95       	lsr	r25
 9bc:	98 2f       	mov	r25, r24
 9be:	88 27       	eor	r24, r24
 9c0:	97 95       	ror	r25
 9c2:	87 95       	ror	r24
 9c4:	82 2b       	or	r24, r18
 9c6:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <i2c_tinyS::i2cData+0x2a>
 9ca:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <i2c_tinyS::i2cData+0x29>
 9ce:	1f c0       	rjmp	.+62     	; 0xa0e <__vector_29+0x104>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:116
            else {
                i2c->Addr = TWSD;
 9d0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__EEPROM_REGION_LENGTH__+0x7f00a0>
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <i2c_tinyS::i2cData+0x2a>
 9da:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <i2c_tinyS::i2cData+0x29>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:117
                i2c->startCount++;
 9de:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <i2c_tinyS::i2cData+0x28>
 9e2:	8f 5f       	subi	r24, 0xFF	; 255
 9e4:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <i2c_tinyS::i2cData+0x28>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:118
                if ((i2c->Addr & B11111001) == B11110000) {
 9e8:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <i2c_tinyS::i2cData+0x29>
 9ec:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <i2c_tinyS::i2cData+0x2a>
 9f0:	89 7f       	andi	r24, 0xF9	; 249
 9f2:	99 27       	eor	r25, r25
 9f4:	80 3f       	cpi	r24, 0xF0	; 240
 9f6:	91 05       	cpc	r25, r1
 9f8:	51 f4       	brne	.+20     	; 0xa0e <__vector_29+0x104>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:119
                    SET_TENBIT;
 9fa:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <i2c_tinyS::i2cData+0x29>
 9fe:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <i2c_tinyS::i2cData+0x2a>
 a02:	90 68       	ori	r25, 0x80	; 128
 a04:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <i2c_tinyS::i2cData+0x2a>
 a08:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <i2c_tinyS::i2cData+0x29>
 a0c:	5d c0       	rjmp	.+186    	; 0xac8 <__vector_29+0x1be>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:124
                    TWSCRB = (B0011 | TWI_HIGH_NOISE_MODE);
                    return;
                }
            }
            if (i2c->user_onAddrReceive != (void *)NULL) {
 a0e:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <i2c_tinyS::i2cData+0x2b>
 a12:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <i2c_tinyS::i2cData+0x2c>
 a16:	30 97       	sbiw	r30, 0x00	; 0
 a18:	79 f0       	breq	.+30     	; 0xa38 <__vector_29+0x12e>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:125
                i2c->rxBufferIndex = 0;
 a1a:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <i2c_tinyS::i2cData+0x21>
 a1e:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <i2c_tinyS::i2cData+0x20>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:126
                if (!i2c->user_onAddrReceive(i2c->Addr, i2c->startCount)) {
 a22:	60 91 de 01 	lds	r22, 0x01DE	; 0x8001de <i2c_tinyS::i2cData+0x28>
 a26:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <i2c_tinyS::i2cData+0x29>
 a2a:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <i2c_tinyS::i2cData+0x2a>
 a2e:	09 95       	icall
 a30:	81 11       	cpse	r24, r1
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <__vector_29+0x12e>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:127
                    TWSCRB = (B0111 | TWI_HIGH_NOISE_MODE);
 a34:	87 e0       	ldi	r24, 0x07	; 7
 a36:	49 c0       	rjmp	.+146    	; 0xaca <__vector_29+0x1c0>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:131
                    return;
                }
            }
            if ((status & _BV(TWDIR))) {
 a38:	c1 ff       	sbrs	r28, 1
 a3a:	10 c0       	rjmp	.+32     	; 0xa5c <__vector_29+0x152>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:132
                i2c->txBufferLength = 0;
 a3c:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <i2c_tinyS::i2cData+0x27>
 a40:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <i2c_tinyS::i2cData+0x26>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:133
                if (i2c->user_onRequest != (void *)NULL) i2c->user_onRequest();
 a44:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <i2c_tinyS::i2cData+0x2f>
 a48:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <i2c_tinyS::i2cData+0x30>
 a4c:	30 97       	sbiw	r30, 0x00	; 0
 a4e:	09 f0       	breq	.+2      	; 0xa52 <__vector_29+0x148>
 a50:	09 95       	icall
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:134
                i2c->txBufferIndex = 0;
 a52:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <i2c_tinyS::i2cData+0x25>
 a56:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <i2c_tinyS::i2cData+0x24>
 a5a:	36 c0       	rjmp	.+108    	; 0xac8 <__vector_29+0x1be>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:135
            } else i2c->rxBufferLength = 0;
 a5c:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <i2c_tinyS::i2cData+0x23>
 a60:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <i2c_tinyS::i2cData+0x22>
 a64:	31 c0       	rjmp	.+98     	; 0xac8 <__vector_29+0x1be>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:140
        } else {
            if ((status & _BV(TWDIR))) {
                if (i2c->user_onStop != (void *)NULL) i2c->user_onStop();
            } else {
                if (i2c->user_onReceive != (void *)NULL) {
 a66:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <i2c_tinyS::i2cData+0x2d>
 a6a:	f0 91 e4 01 	lds	r31, 0x01E4	; 0x8001e4 <i2c_tinyS::i2cData+0x2e>
 a6e:	30 97       	sbiw	r30, 0x00	; 0
 a70:	09 f4       	brne	.+2      	; 0xa74 <__vector_29+0x16a>
 a72:	85 cf       	rjmp	.-246    	; 0x97e <__vector_29+0x74>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:141
                    i2c->rxBufferIndex = 0;
 a74:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <i2c_tinyS::i2cData+0x21>
 a78:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <i2c_tinyS::i2cData+0x20>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:142
                    i2c->user_onReceive(i2c->rxBufferLength);
 a7c:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <i2c_tinyS::i2cData+0x22>
 a80:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <i2c_tinyS::i2cData+0x23>
 a84:	09 95       	icall
 a86:	7b cf       	rjmp	.-266    	; 0x97e <__vector_29+0x74>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:150
            i2c->startCount = -1;
            CLEAR_TENBIT;
            TWSSRA = _BV(TWASIF);
            return;
        }
    } else if ((status & _BV(TWDIF))) {
 a88:	c7 ff       	sbrs	r28, 7
 a8a:	1e c0       	rjmp	.+60     	; 0xac8 <__vector_29+0x1be>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:151
        if ((status & _BV(TWDIR))) {
 a8c:	c1 ff       	sbrs	r28, 1
 a8e:	22 c0       	rjmp	.+68     	; 0xad4 <__vector_29+0x1ca>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:152
            if (i2c->txBufferIndex < i2c->txBufferLength) TWSD = i2c->Buffer[i2c->txBufferIndex++];
 a90:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <i2c_tinyS::i2cData+0x24>
 a94:	30 91 db 01 	lds	r19, 0x01DB	; 0x8001db <i2c_tinyS::i2cData+0x25>
 a98:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <i2c_tinyS::i2cData+0x26>
 a9c:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <i2c_tinyS::i2cData+0x27>
 aa0:	28 17       	cp	r18, r24
 aa2:	39 07       	cpc	r19, r25
 aa4:	a8 f4       	brcc	.+42     	; 0xad0 <__vector_29+0x1c6>
 aa6:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <i2c_tinyS::i2cData+0x24>
 aaa:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <i2c_tinyS::i2cData+0x25>
 aae:	9c 01       	movw	r18, r24
 ab0:	2f 5f       	subi	r18, 0xFF	; 255
 ab2:	3f 4f       	sbci	r19, 0xFF	; 255
 ab4:	30 93 db 01 	sts	0x01DB, r19	; 0x8001db <i2c_tinyS::i2cData+0x25>
 ab8:	20 93 da 01 	sts	0x01DA, r18	; 0x8001da <i2c_tinyS::i2cData+0x24>
 abc:	fc 01       	movw	r30, r24
 abe:	ea 54       	subi	r30, 0x4A	; 74
 ac0:	fe 4f       	sbci	r31, 0xFE	; 254
 ac2:	80 81       	ld	r24, Z
 ac4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__EEPROM_REGION_LENGTH__+0x7f00a0>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:165
                TWSCRB = (B0110 | TWI_HIGH_NOISE_MODE);
                return;
            }
        }
    }
    TWSCRB = (B0011 | TWI_HIGH_NOISE_MODE);
 ac8:	83 e0       	ldi	r24, 0x03	; 3
 aca:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__EEPROM_REGION_LENGTH__+0x7f00a4>
 ace:	1c c0       	rjmp	.+56     	; 0xb08 <__vector_29+0x1fe>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:154
        }
    } else if ((status & _BV(TWDIF))) {
        if ((status & _BV(TWDIR))) {
            if (i2c->txBufferIndex < i2c->txBufferLength) TWSD = i2c->Buffer[i2c->txBufferIndex++];
            else {
                TWSCRB = (B0010 | TWI_HIGH_NOISE_MODE);
 ad0:	82 e0       	ldi	r24, 0x02	; 2
 ad2:	fb cf       	rjmp	.-10     	; 0xaca <__vector_29+0x1c0>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:158
                return;
            }
        } else {
            if (i2c->rxBufferLength < I2C_BUFFER_LENGTH) i2c->Buffer[i2c->rxBufferLength++] = TWSD;
 ad4:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <i2c_tinyS::i2cData+0x22>
 ad8:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <i2c_tinyS::i2cData+0x23>
 adc:	80 97       	sbiw	r24, 0x20	; 32
 ade:	90 f4       	brcc	.+36     	; 0xb04 <__vector_29+0x1fa>
 ae0:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <i2c_tinyS::i2cData+0x22>
 ae4:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <i2c_tinyS::i2cData+0x23>
 ae8:	9c 01       	movw	r18, r24
 aea:	2f 5f       	subi	r18, 0xFF	; 255
 aec:	3f 4f       	sbci	r19, 0xFF	; 255
 aee:	30 93 d9 01 	sts	0x01D9, r19	; 0x8001d9 <i2c_tinyS::i2cData+0x23>
 af2:	20 93 d8 01 	sts	0x01D8, r18	; 0x8001d8 <i2c_tinyS::i2cData+0x22>
 af6:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__EEPROM_REGION_LENGTH__+0x7f00a0>
 afa:	fc 01       	movw	r30, r24
 afc:	ea 54       	subi	r30, 0x4A	; 74
 afe:	fe 4f       	sbci	r31, 0xFE	; 254
 b00:	20 83       	st	Z, r18
 b02:	e2 cf       	rjmp	.-60     	; 0xac8 <__vector_29+0x1be>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:160
            else {
                TWSCRB = (B0110 | TWI_HIGH_NOISE_MODE);
 b04:	86 e0       	ldi	r24, 0x06	; 6
 b06:	e1 cf       	rjmp	.-62     	; 0xaca <__vector_29+0x1c0>
__vector_29():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:172

ISR(TWI_SLAVE_vect) {
    I2C_INTR_FLAG_ON;
    i2c_isr_handler();
    I2C_INTR_FLAG_OFF;
}
 b08:	ff 91       	pop	r31
 b0a:	ef 91       	pop	r30
 b0c:	cf 91       	pop	r28
 b0e:	bf 91       	pop	r27
 b10:	af 91       	pop	r26
 b12:	9f 91       	pop	r25
 b14:	8f 91       	pop	r24
 b16:	7f 91       	pop	r23
 b18:	6f 91       	pop	r22
 b1a:	5f 91       	pop	r21
 b1c:	4f 91       	pop	r20
 b1e:	3f 91       	pop	r19
 b20:	2f 91       	pop	r18
 b22:	0f 90       	pop	r0
 b24:	0f be       	out	0x3f, r0	; 63
 b26:	0f 90       	pop	r0
 b28:	1f 90       	pop	r1
 b2a:	18 95       	reti

00000b2c <global constructors keyed to 65535_0_Qwiic_Iridium_9603N_ATtiny841.ino.cpp.o.1890>:
_GLOBAL__I_65535_0_Qwiic_Iridium_9603N_ATtiny841.ino.cpp.o.1890():
 b2c:	cf 93       	push	r28
 b2e:	df 93       	push	r29
_ZN5PrintC2Ev():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/Print.h:43
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 b30:	e7 e9       	ldi	r30, 0x97	; 151
 b32:	f1 e0       	ldi	r31, 0x01	; 1
 b34:	13 82       	std	Z+3, r1	; 0x03
 b36:	12 82       	std	Z+2, r1	; 0x02
__base_ctor ():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/Stream.h:64
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 b38:	88 ee       	ldi	r24, 0xE8	; 232
 b3a:	93 e0       	ldi	r25, 0x03	; 3
 b3c:	a0 e0       	ldi	r26, 0x00	; 0
 b3e:	b0 e0       	ldi	r27, 0x00	; 0
 b40:	84 83       	std	Z+4, r24	; 0x04
 b42:	95 83       	std	Z+5, r25	; 0x05
 b44:	a6 83       	std	Z+6, r26	; 0x06
 b46:	b7 83       	std	Z+7, r27	; 0x07
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:174

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,  volatile uint8_t *ucsrc,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
 b48:	c4 e0       	ldi	r28, 0x04	; 4
 b4a:	d1 e0       	ldi	r29, 0x01	; 1
 b4c:	d1 83       	std	Z+1, r29	; 0x01
 b4e:	c0 83       	st	Z, r28
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:176
{
  _rx_buffer = rx_buffer;
 b50:	23 e7       	ldi	r18, 0x73	; 115
 b52:	31 e0       	ldi	r19, 0x01	; 1
 b54:	35 87       	std	Z+13, r19	; 0x0d
 b56:	24 87       	std	Z+12, r18	; 0x0c
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:177
  _ubrrh = ubrrh;
 b58:	22 e8       	ldi	r18, 0x82	; 130
 b5a:	30 e0       	ldi	r19, 0x00	; 0
 b5c:	37 87       	std	Z+15, r19	; 0x0f
 b5e:	26 87       	std	Z+14, r18	; 0x0e
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:178
  _ubrrl = ubrrl;
 b60:	21 e8       	ldi	r18, 0x81	; 129
 b62:	30 e0       	ldi	r19, 0x00	; 0
 b64:	31 8b       	std	Z+17, r19	; 0x11
 b66:	20 8b       	std	Z+16, r18	; 0x10
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:179
  _ucsra = ucsra;
 b68:	26 e8       	ldi	r18, 0x86	; 134
 b6a:	30 e0       	ldi	r19, 0x00	; 0
 b6c:	33 8b       	std	Z+19, r19	; 0x13
 b6e:	22 8b       	std	Z+18, r18	; 0x12
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:180
  _ucsrb = ucsrb;
 b70:	25 e8       	ldi	r18, 0x85	; 133
 b72:	30 e0       	ldi	r19, 0x00	; 0
 b74:	35 8b       	std	Z+21, r19	; 0x15
 b76:	24 8b       	std	Z+20, r18	; 0x14
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:181
  _ucsrc = ucsrc;
 b78:	24 e8       	ldi	r18, 0x84	; 132
 b7a:	30 e0       	ldi	r19, 0x00	; 0
 b7c:	31 8f       	std	Z+25, r19	; 0x19
 b7e:	20 8f       	std	Z+24, r18	; 0x18
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:182
  _udr = udr;
 b80:	20 e8       	ldi	r18, 0x80	; 128
 b82:	30 e0       	ldi	r19, 0x00	; 0
 b84:	37 8b       	std	Z+23, r19	; 0x17
 b86:	26 8b       	std	Z+22, r18	; 0x16
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:183
  _rxen = rxen;
 b88:	64 e0       	ldi	r22, 0x04	; 4
 b8a:	62 8f       	std	Z+26, r22	; 0x1a
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:184
  _txen = txen;
 b8c:	53 e0       	ldi	r21, 0x03	; 3
 b8e:	53 8f       	std	Z+27, r21	; 0x1b
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:185
  _rxcie = rxcie;
 b90:	47 e0       	ldi	r20, 0x07	; 7
 b92:	44 8f       	std	Z+28, r20	; 0x1c
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:186
  _udre = udre;
 b94:	35 e0       	ldi	r19, 0x05	; 5
 b96:	35 8f       	std	Z+29, r19	; 0x1d
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:187
  _u2x = u2x;
 b98:	21 e0       	ldi	r18, 0x01	; 1
 b9a:	26 8f       	std	Z+30, r18	; 0x1e
_ZN5PrintC2Ev():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/Print.h:43
 b9c:	e4 e5       	ldi	r30, 0x54	; 84
 b9e:	f1 e0       	ldi	r31, 0x01	; 1
 ba0:	13 82       	std	Z+3, r1	; 0x03
 ba2:	12 82       	std	Z+2, r1	; 0x02
__base_ctor ():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/Stream.h:64
 ba4:	84 83       	std	Z+4, r24	; 0x04
 ba6:	95 83       	std	Z+5, r25	; 0x05
 ba8:	a6 83       	std	Z+6, r26	; 0x06
 baa:	b7 83       	std	Z+7, r27	; 0x07
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:174

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,  volatile uint8_t *ucsrc,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
 bac:	d1 83       	std	Z+1, r29	; 0x01
 bae:	c0 83       	st	Z, r28
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:176
{
  _rx_buffer = rx_buffer;
 bb0:	c0 e3       	ldi	r28, 0x30	; 48
 bb2:	d1 e0       	ldi	r29, 0x01	; 1
 bb4:	d5 87       	std	Z+13, r29	; 0x0d
 bb6:	c4 87       	std	Z+12, r28	; 0x0c
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:177
  _ubrrh = ubrrh;
 bb8:	c2 e9       	ldi	r28, 0x92	; 146
 bba:	d0 e0       	ldi	r29, 0x00	; 0
 bbc:	d7 87       	std	Z+15, r29	; 0x0f
 bbe:	c6 87       	std	Z+14, r28	; 0x0e
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:178
  _ubrrl = ubrrl;
 bc0:	c1 e9       	ldi	r28, 0x91	; 145
 bc2:	d0 e0       	ldi	r29, 0x00	; 0
 bc4:	d1 8b       	std	Z+17, r29	; 0x11
 bc6:	c0 8b       	std	Z+16, r28	; 0x10
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:179
  _ucsra = ucsra;
 bc8:	c6 e9       	ldi	r28, 0x96	; 150
 bca:	d0 e0       	ldi	r29, 0x00	; 0
 bcc:	d3 8b       	std	Z+19, r29	; 0x13
 bce:	c2 8b       	std	Z+18, r28	; 0x12
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:180
  _ucsrb = ucsrb;
 bd0:	c5 e9       	ldi	r28, 0x95	; 149
 bd2:	d0 e0       	ldi	r29, 0x00	; 0
 bd4:	d5 8b       	std	Z+21, r29	; 0x15
 bd6:	c4 8b       	std	Z+20, r28	; 0x14
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:181
  _ucsrc = ucsrc;
 bd8:	c4 e9       	ldi	r28, 0x94	; 148
 bda:	d0 e0       	ldi	r29, 0x00	; 0
 bdc:	d1 8f       	std	Z+25, r29	; 0x19
 bde:	c0 8f       	std	Z+24, r28	; 0x18
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:182
  _udr = udr;
 be0:	c0 e9       	ldi	r28, 0x90	; 144
 be2:	d0 e0       	ldi	r29, 0x00	; 0
 be4:	d7 8b       	std	Z+23, r29	; 0x17
 be6:	c6 8b       	std	Z+22, r28	; 0x16
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:183
  _rxen = rxen;
 be8:	62 8f       	std	Z+26, r22	; 0x1a
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:184
  _txen = txen;
 bea:	53 8f       	std	Z+27, r21	; 0x1b
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:185
  _rxcie = rxcie;
 bec:	44 8f       	std	Z+28, r20	; 0x1c
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:186
  _udre = udre;
 bee:	35 8f       	std	Z+29, r19	; 0x1d
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:187
  _u2x = u2x;
 bf0:	26 8f       	std	Z+30, r18	; 0x1e
_ZN5PrintC2Ev():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/Print.h:43
 bf2:	e9 ee       	ldi	r30, 0xE9	; 233
 bf4:	f1 e0       	ldi	r31, 0x01	; 1
 bf6:	13 82       	std	Z+3, r1	; 0x03
 bf8:	12 82       	std	Z+2, r1	; 0x02
__base_ctor ():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/Stream.h:64
 bfa:	84 83       	std	Z+4, r24	; 0x04
 bfc:	95 83       	std	Z+5, r25	; 0x05
 bfe:	a6 83       	std	Z+6, r26	; 0x06
 c00:	b7 83       	std	Z+7, r27	; 0x07
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:51
#define CLEAR_TENBIT do { i2c->Addr &= 0x7FFF; } while(0)
#define IS_TENBIT (i2c->Addr & 0x8000)

struct i2cStruct i2c_tinyS::i2cData;

i2c_tinyS::i2c_tinyS() {
 c02:	84 e1       	ldi	r24, 0x14	; 20
 c04:	91 e0       	ldi	r25, 0x01	; 1
 c06:	91 83       	std	Z+1, r25	; 0x01
 c08:	80 83       	st	Z, r24
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:52
    i2c = &i2cData;
 c0a:	86 eb       	ldi	r24, 0xB6	; 182
 c0c:	91 e0       	ldi	r25, 0x01	; 1
 c0e:	95 87       	std	Z+13, r25	; 0x0d
 c10:	84 87       	std	Z+12, r24	; 0x0c
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/Wire.cpp:638
#include "WireS.h"
#endif

// Constructors ////////////////////////////////////////////////////////////////
//#ifndef WIRE_MASTER_ONLY
TwoWire::TwoWire() : slaveMode(false) {
 c12:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <Wire>
 c16:	df 91       	pop	r29
 c18:	cf 91       	pop	r28
 c1a:	08 95       	ret

00000c1c <main>:
main():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:458
}

void init(void)
{
  // this needs to be called before setup() or some functions won't work there
  sei();
 c1c:	78 94       	sei
Timer0_SetWaveformGenerationMode():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:140
}
timer0_wgm_t;

__attribute__((always_inline)) static inline void Timer0_SetWaveformGenerationMode( timer0_wgm_t wgm )
{
  TCCR0A = (TCCR0A & ~MASK2(WGM01,WGM00)) | (((wgm & B011) >> 0) << WGM00);
 c1e:	80 b7       	in	r24, 0x30	; 48
 c20:	83 60       	ori	r24, 0x03	; 3
 c22:	80 bf       	out	0x30, r24	; 48
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:141
  TCCR0B = (TCCR0B & ~MASK1(WGM02))       | (((wgm & B100) >> 2) << WGM02);
 c24:	83 b7       	in	r24, 0x33	; 51
 c26:	87 7f       	andi	r24, 0xF7	; 247
 c28:	83 bf       	out	0x33, r24	; 51
Timer0_ClockSelect():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:122
}
timer0_cs_t;

__attribute__((always_inline)) static inline void Timer0_ClockSelect( timer0_cs_t cs )
{
  TCCR0B = (TCCR0B & ~MASK3(CS02,CS01,CS00)) | (cs << CS00);
 c2a:	83 b7       	in	r24, 0x33	; 51
 c2c:	88 7f       	andi	r24, 0xF8	; 248
 c2e:	83 60       	ori	r24, 0x03	; 3
 c30:	83 bf       	out	0x33, r24	; 51
Timer0_EnableOverflowInterrupt():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:198
  TIMSK0 |= (1<<OCIE0A);
}

__attribute__((always_inline)) static inline void Timer0_EnableOverflowInterrupt( void )
{
  TIMSK0 |= (1<<TOIE0);
 c32:	89 b7       	in	r24, 0x39	; 57
 c34:	81 60       	ori	r24, 0x01	; 1
 c36:	89 bf       	out	0x39, r24	; 57
Timer2_ClockSelect():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:470
}
timer2_cs_t;

__attribute__((always_inline)) static inline void Timer2_ClockSelect( timer2_cs_t cs )
{
  TCCR2B = (TCCR2B & ~MASK3(CS22,CS21,CS20)) | (cs << CS20);
 c38:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
 c3c:	88 7f       	andi	r24, 0xF8	; 248
 c3e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
Timer2_SetWaveformGenerationMode():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:496
}
timer2_wgm_t;

__attribute__((always_inline)) static inline void Timer2_SetWaveformGenerationMode( timer2_wgm_t wgm )
{
  TCCR2A = (TCCR2A & ~MASK2(WGM21,WGM20)) | (((wgm & B0011) >> 0) << WGM20);
 c42:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
 c46:	8c 7f       	andi	r24, 0xFC	; 252
 c48:	81 60       	ori	r24, 0x01	; 1
 c4a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:497
  TCCR2B = (TCCR2B & ~MASK2(WGM23,WGM22)) | (((wgm & B1100) >> 2) << WGM22);
 c4e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
 c52:	87 7e       	andi	r24, 0xE7	; 231
 c54:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
Timer2_ClockSelect():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:470
}
timer2_cs_t;

__attribute__((always_inline)) static inline void Timer2_ClockSelect( timer2_cs_t cs )
{
  TCCR2B = (TCCR2B & ~MASK3(CS22,CS21,CS20)) | (cs << CS20);
 c58:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
 c5c:	88 7f       	andi	r24, 0xF8	; 248
 c5e:	83 60       	ori	r24, 0x03	; 3
 c60:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
Timer1_ClockSelect():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:282
}
timer1_cs_t;

__attribute__((always_inline)) static inline void Timer1_ClockSelect( timer1_cs_t cs )
{
  TCCR1B = (TCCR1B & ~MASK3(CS12,CS11,CS10)) | (cs << CS10);
 c64:	8e b5       	in	r24, 0x2e	; 46
 c66:	88 7f       	andi	r24, 0xF8	; 248
 c68:	8e bd       	out	0x2e, r24	; 46
Timer1_SetWaveformGenerationMode():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:308
}
timer1_wgm_t;

__attribute__((always_inline)) static inline void Timer1_SetWaveformGenerationMode( timer1_wgm_t wgm )
{
  TCCR1A = (TCCR1A & ~MASK2(WGM11,WGM10)) | (((wgm & B0011) >> 0) << WGM10);
 c6a:	8f b5       	in	r24, 0x2f	; 47
 c6c:	8c 7f       	andi	r24, 0xFC	; 252
 c6e:	81 60       	ori	r24, 0x01	; 1
 c70:	8f bd       	out	0x2f, r24	; 47
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:309
  TCCR1B = (TCCR1B & ~MASK2(WGM13,WGM12)) | (((wgm & B1100) >> 2) << WGM12);
 c72:	8e b5       	in	r24, 0x2e	; 46
 c74:	87 7e       	andi	r24, 0xE7	; 231
 c76:	8e bd       	out	0x2e, r24	; 46
Timer1_ClockSelect():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_timers.h:282
}
timer1_cs_t;

__attribute__((always_inline)) static inline void Timer1_ClockSelect( timer1_cs_t cs )
{
  TCCR1B = (TCCR1B & ~MASK3(CS12,CS11,CS10)) | (cs << CS10);
 c78:	8e b5       	in	r24, 0x2e	; 46
 c7a:	88 7f       	andi	r24, 0xF8	; 248
 c7c:	83 60       	ori	r24, 0x03	; 3
 c7e:	8e bd       	out	0x2e, r24	; 46
initTimer841():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:437
  Timer1_SetWaveformGenerationMode(1);
  Timer1_ClockSelect(3);

  #endif

  TOCPMSA0=0b00010000;
 c80:	80 e1       	ldi	r24, 0x10	; 16
 c82:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <__EEPROM_REGION_LENGTH__+0x7f0067>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:438
  TOCPMSA1=0b10100100;
 c86:	84 ea       	ldi	r24, 0xA4	; 164
 c88:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/wiring.c:439
  TOCPMCOE=0b11111100;
 c8c:	8c ef       	ldi	r24, 0xFC	; 252
 c8e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__EEPROM_REGION_LENGTH__+0x7f0066>
ADC_PrescalerSelect():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_adc.h:89
}
adc_ps_t;

__attribute__((always_inline)) static inline void ADC_PrescalerSelect( adc_ps_t ps )
{
  ADCSRA = (ADCSRA & ~MASK3(ADPS2,ADPS1,ADPS0)) | (ps << ADPS0);
 c92:	85 b1       	in	r24, 0x05	; 5
 c94:	88 7f       	andi	r24, 0xF8	; 248
 c96:	86 60       	ori	r24, 0x06	; 6
 c98:	85 b9       	out	0x05, r24	; 5
ADC_Enable():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/core_adc.h:94
}

__attribute__((always_inline)) static inline void ADC_Enable( void )
{
  ADCSRA |= MASK1( ADEN );
 c9a:	2f 9a       	sbi	0x05, 7	; 5
setup():
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/Qwiic_Iridium_9603N_ATtiny841.ino:147

void setup()
{
  // Digital outputs
  pinMode(ON_OFF, OUTPUT);
 c9c:	61 e0       	ldi	r22, 0x01	; 1
 c9e:	80 e0       	ldi	r24, 0x00	; 0
 ca0:	a0 da       	rcall	.-2752   	; 0x1e2 <pinMode>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/Qwiic_Iridium_9603N_ATtiny841.ino:148
  digitalWrite(ON_OFF, ON_OFF__OFF); // Disable the 9603N until PGOOD has gone high
 ca2:	60 e0       	ldi	r22, 0x00	; 0
 ca4:	80 e0       	ldi	r24, 0x00	; 0
 ca6:	3f da       	rcall	.-2946   	; 0x126 <digitalWrite>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/Qwiic_Iridium_9603N_ATtiny841.ino:149
  pinMode(PWR_EN, OUTPUT);
 ca8:	61 e0       	ldi	r22, 0x01	; 1
 caa:	83 e0       	ldi	r24, 0x03	; 3
 cac:	9a da       	rcall	.-2764   	; 0x1e2 <pinMode>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/Qwiic_Iridium_9603N_ATtiny841.ino:150
  digitalWrite(PWR_EN, PWR_EN__OFF); // Disable power to the 9603N until PGOOD has gone high
 cae:	60 e0       	ldi	r22, 0x00	; 0
 cb0:	83 e0       	ldi	r24, 0x03	; 3
 cb2:	39 da       	rcall	.-2958   	; 0x126 <digitalWrite>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/Qwiic_Iridium_9603N_ATtiny841.ino:151
  pinMode(SHDN, OUTPUT);
 cb4:	61 e0       	ldi	r22, 0x01	; 1
 cb6:	8a e0       	ldi	r24, 0x0A	; 10
 cb8:	94 da       	rcall	.-2776   	; 0x1e2 <pinMode>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/Qwiic_Iridium_9603N_ATtiny841.ino:152
  digitalWrite(SHDN, SHDN__ON); // Enable the LTC3225 and charge the supercapacitors
 cba:	61 e0       	ldi	r22, 0x01	; 1
 cbc:	8a e0       	ldi	r24, 0x0A	; 10
 cbe:	33 da       	rcall	.-2970   	; 0x126 <digitalWrite>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/Qwiic_Iridium_9603N_ATtiny841.ino:155

  // Initialize the IO_REGISTER
  IO_REGISTER = IO_SHDN; // Set (only) the SHDN bit in the IO register (Probably redundant. Reading the IO_REG will update it.)
 cc0:	c1 e0       	ldi	r28, 0x01	; 1
 cc2:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <IO_REGISTER>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/Qwiic_Iridium_9603N_ATtiny841.ino:158

  // Digital inputs
  pinMode(PGOOD, INPUT); // Has its own pullup
 cc6:	60 e0       	ldi	r22, 0x00	; 0
 cc8:	88 e0       	ldi	r24, 0x08	; 8
 cca:	8b da       	rcall	.-2794   	; 0x1e2 <pinMode>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/Qwiic_Iridium_9603N_ATtiny841.ino:159
  pinMode(NA, INPUT);
 ccc:	60 e0       	ldi	r22, 0x00	; 0
 cce:	87 e0       	ldi	r24, 0x07	; 7
 cd0:	88 da       	rcall	.-2800   	; 0x1e2 <pinMode>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/Qwiic_Iridium_9603N_ATtiny841.ino:160
  pinMode(RI, INPUT);
 cd2:	60 e0       	ldi	r22, 0x00	; 0
 cd4:	89 e0       	ldi	r24, 0x09	; 9
 cd6:	85 da       	rcall	.-2806   	; 0x1e2 <pinMode>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/Qwiic_Iridium_9603N_ATtiny841.ino:163

  // Serial pins for software serial
  pinMode(TXPIN, OUTPUT); // Tx pin
 cd8:	61 e0       	ldi	r22, 0x01	; 1
 cda:	81 e0       	ldi	r24, 0x01	; 1
 cdc:	82 da       	rcall	.-2812   	; 0x1e2 <pinMode>
\\thunderbird\home\pclark\Documents\Arduino\Qwiic_Iridium_9603N_ATtiny841/Qwiic_Iridium_9603N_ATtiny841.ino:164
  pinMode(RXPIN, INPUT); // Rx pin
 cde:	60 e0       	ldi	r22, 0x00	; 0
 ce0:	82 e0       	ldi	r24, 0x02	; 2
 ce2:	7f da       	rcall	.-2818   	; 0x1e2 <pinMode>
attachInterrupt():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/WInterrupts.c:60
      If attachInterrupt is called in succession for the same
      interruptNum but a different userFunc then the following line
      is not safe.  Changing intFunc is not atomic.
    intFunc[interruptNum] = userFunc;
    */
    MAKE_ATOMIC( intFunc[interruptNum] = userFunc; )
 ce4:	8f b7       	in	r24, 0x3f	; 63
 ce6:	f8 94       	cli
 ce8:	29 e3       	ldi	r18, 0x39	; 57
 cea:	31 e0       	ldi	r19, 0x01	; 1
 cec:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <intFunc+0x1>
 cf0:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <intFunc>
 cf4:	8f bf       	out	0x3f, r24	; 63
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/WInterrupts.c:73

    switch ( interruptNum )
    {
      #if NUMBER_EXTERNAL_INTERRUPTS >= 1
        case EXTERNAL_INTERRUPT_0:
          EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
 cf6:	85 b7       	in	r24, 0x35	; 53
 cf8:	8c 7f       	andi	r24, 0xFC	; 252
 cfa:	82 60       	ori	r24, 0x02	; 2
 cfc:	85 bf       	out	0x35, r24	; 53
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/WInterrupts.c:74
          EIMSK |= (1 << INT0);
 cfe:	8b b7       	in	r24, 0x3b	; 59
 d00:	80 64       	ori	r24, 0x40	; 64
 d02:	8b bf       	out	0x3b, r24	; 59
begin():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:207
    use_u2x = false;
  }
#endif
*/
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
 d04:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <Serial+0x12>
 d08:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <Serial+0x13>
 d0c:	81 e0       	ldi	r24, 0x01	; 1
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	9c 01       	movw	r18, r24
 d12:	00 90 b5 01 	lds	r0, 0x01B5	; 0x8001b5 <Serial+0x1e>
 d16:	02 c0       	rjmp	.+4      	; 0xd1c <main+0x100>
 d18:	22 0f       	add	r18, r18
 d1a:	33 1f       	adc	r19, r19
 d1c:	0a 94       	dec	r0
 d1e:	e2 f7       	brpl	.-8      	; 0xd18 <main+0xfc>
 d20:	20 83       	st	Z, r18
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:215
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 d22:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <Serial+0xe>
 d26:	f0 91 a6 01 	lds	r31, 0x01A6	; 0x8001a6 <Serial+0xf>
 d2a:	10 82       	st	Z, r1
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:216
  *_ubrrl = baud_setting;
 d2c:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <Serial+0x10>
 d30:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <Serial+0x11>
 d34:	23 e3       	ldi	r18, 0x33	; 51
 d36:	20 83       	st	Z, r18
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:218

  *_ucsrc = config;
 d38:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <Serial+0x18>
 d3c:	f0 91 b0 01 	lds	r31, 0x01B0	; 0x8001b0 <Serial+0x19>
 d40:	26 e0       	ldi	r18, 0x06	; 6
 d42:	20 83       	st	Z, r18
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:219
  sbi(*_ucsrb, _rxen);
 d44:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <Serial+0x14>
 d48:	f0 91 ac 01 	lds	r31, 0x01AC	; 0x8001ac <Serial+0x15>
 d4c:	40 81       	ld	r20, Z
 d4e:	9c 01       	movw	r18, r24
 d50:	00 90 b1 01 	lds	r0, 0x01B1	; 0x8001b1 <Serial+0x1a>
 d54:	02 c0       	rjmp	.+4      	; 0xd5a <main+0x13e>
 d56:	22 0f       	add	r18, r18
 d58:	33 1f       	adc	r19, r19
 d5a:	0a 94       	dec	r0
 d5c:	e2 f7       	brpl	.-8      	; 0xd56 <main+0x13a>
 d5e:	24 2b       	or	r18, r20
 d60:	20 83       	st	Z, r18
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:220
  sbi(*_ucsrb, _txen);
 d62:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <Serial+0x14>
 d66:	f0 91 ac 01 	lds	r31, 0x01AC	; 0x8001ac <Serial+0x15>
 d6a:	40 81       	ld	r20, Z
 d6c:	9c 01       	movw	r18, r24
 d6e:	00 90 b2 01 	lds	r0, 0x01B2	; 0x8001b2 <Serial+0x1b>
 d72:	02 c0       	rjmp	.+4      	; 0xd78 <main+0x15c>
 d74:	22 0f       	add	r18, r18
 d76:	33 1f       	adc	r19, r19
 d78:	0a 94       	dec	r0
 d7a:	e2 f7       	brpl	.-8      	; 0xd74 <main+0x158>
 d7c:	24 2b       	or	r18, r20
 d7e:	20 83       	st	Z, r18
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\cores\tinymodern/HardwareSerial.cpp:221
  sbi(*_ucsrb, _rxcie);
 d80:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <Serial+0x14>
 d84:	f0 91 ac 01 	lds	r31, 0x01AC	; 0x8001ac <Serial+0x15>
 d88:	20 81       	ld	r18, Z
 d8a:	00 90 b3 01 	lds	r0, 0x01B3	; 0x8001b3 <Serial+0x1c>
 d8e:	02 c0       	rjmp	.+4      	; 0xd94 <main+0x178>
 d90:	88 0f       	add	r24, r24
 d92:	99 1f       	adc	r25, r25
 d94:	0a 94       	dec	r0
 d96:	e2 f7       	brpl	.-8      	; 0xd90 <main+0x174>
 d98:	82 2b       	or	r24, r18
 d9a:	80 83       	st	Z, r24
 d9c:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <TinyWireS+0xc>
 da0:	f0 91 f6 01 	lds	r31, 0x01F6	; 0x8001f6 <TinyWireS+0xd>
begin_():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:59

i2c_tinyS::~i2c_tinyS() {}

void i2c_tinyS::begin_(struct i2cStruct* i2c, uint8_t address, uint8_t mask) {
    I2C_INTR_FLAG_INIT;
    TWSA = (address << 1);
 da4:	86 ec       	ldi	r24, 0xC6	; 198
 da6:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__EEPROM_REGION_LENGTH__+0x7f00a2>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:60
    TWSAM = mask;
 daa:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__EEPROM_REGION_LENGTH__+0x7f00a1>
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:61
    i2c->startCount = -1;
 dae:	8f ef       	ldi	r24, 0xFF	; 255
 db0:	80 a7       	std	Z+40, r24	; 0x28
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:62
    TWSCRA = (_BV(TWSHE) | _BV(TWDIE) | _BV(TWASIE) | _BV(TWEN) | _BV(TWSIE));
 db2:	8c eb       	ldi	r24, 0xBC	; 188
 db4:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <__EEPROM_REGION_LENGTH__+0x7f00a5>
begin():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/Wire.cpp:661


#ifndef WIRE_MASTER_ONLY
void TwoWire::begin(uint8_t address) {
  TinyWireS.begin(address, 0);
  slaveMode = true;
 db8:	c0 93 f7 01 	sts	0x01F7, r28	; 0x8001f7 <Wire>
_ZN9i2c_tinyS9onReceiveEPFvjE():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.h:114
        inline uint8_t peekByte(void) { return peekByte_(i2c); }
        inline void flush(void) {}
        inline uint16_t getRxAddr(void) { return i2c->Addr; }
        inline size_t getTransmitBytes(void) { return i2c->txBufferIndex; }
        inline void onAddrReceive(boolean (*function)(uint16_t, uint8_t)) { i2c->user_onAddrReceive = function; }
        inline void onReceive(void (*function)(size_t)) { i2c->user_onReceive = function; }
 dbc:	8d e3       	ldi	r24, 0x3D	; 61
 dbe:	93 e0       	ldi	r25, 0x03	; 3
 dc0:	96 a7       	std	Z+46, r25	; 0x2e
 dc2:	85 a7       	std	Z+45, r24	; 0x2d
_ZN9i2c_tinyS9onRequestEPFvvE():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.h:115
        inline void onRequest(void (*function)(void)) { i2c->user_onRequest = function; }
 dc4:	88 e6       	ldi	r24, 0x68	; 104
 dc6:	92 e0       	ldi	r25, 0x02	; 2
 dc8:	90 ab       	std	Z+48, r25	; 0x30
 dca:	87 a7       	std	Z+47, r24	; 0x2f
 dcc:	ff cf       	rjmp	.-2      	; 0xdcc <main+0x1b0>

00000dce <_GLOBAL__sub_D__ZN9i2c_tinyS7i2cDataE>:
_GLOBAL__sub_D__ZN9i2c_tinyS7i2cDataE():
C:\Users\pclark\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.5\libraries\Wire\src/WireS.cpp:174
    I2C_INTR_FLAG_ON;
    i2c_isr_handler();
    I2C_INTR_FLAG_OFF;
}

i2c_tinyS TinyWireS  = i2c_tinyS();
 dce:	08 95       	ret

00000dd0 <__tablejump2__>:
__tablejump2__():
 dd0:	ee 0f       	add	r30, r30
 dd2:	ff 1f       	adc	r31, r31
 dd4:	05 90       	lpm	r0, Z+
 dd6:	f4 91       	lpm	r31, Z
 dd8:	e0 2d       	mov	r30, r0
 dda:	09 94       	ijmp

00000ddc <abort>:
abort():
 ddc:	81 e0       	ldi	r24, 0x01	; 1
 dde:	90 e0       	ldi	r25, 0x00	; 0
 de0:	f8 94       	cli
 de2:	00 c0       	rjmp	.+0      	; 0xde4 <__do_global_dtors>

00000de4 <__do_global_dtors>:
__do_global_dtors():
 de4:	10 e0       	ldi	r17, 0x00	; 0
 de6:	c5 e2       	ldi	r28, 0x25	; 37
 de8:	d0 e0       	ldi	r29, 0x00	; 0
 dea:	03 c0       	rjmp	.+6      	; 0xdf2 <__do_global_dtors+0xe>
 dec:	fe 01       	movw	r30, r28
 dee:	f0 df       	rcall	.-32     	; 0xdd0 <__tablejump2__>
 df0:	21 96       	adiw	r28, 0x01	; 1
 df2:	c6 32       	cpi	r28, 0x26	; 38
 df4:	d1 07       	cpc	r29, r17
 df6:	d1 f7       	brne	.-12     	; 0xdec <__do_global_dtors+0x8>
 df8:	f8 94       	cli

00000dfa <__stop_program>:
__stop_program():
 dfa:	ff cf       	rjmp	.-2      	; 0xdfa <__stop_program>
